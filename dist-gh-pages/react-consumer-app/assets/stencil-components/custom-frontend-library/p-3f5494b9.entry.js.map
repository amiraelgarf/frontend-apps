{"version":3,"names":["bubbleChartCss","DEFAULT_BUBBLE_DATA","country","population","world_land_area_percentage","BubbleChart","myHeight","myTitle","xTitle","yTitle","myWidth","charWidth","bubbleData","seriesData","countyName","apexChartInstance","originalXMin","originalXMax","originalYMin","originalYMax","constructor","hostRef","this","ProcessBubbleData","TheData","name","data","map","items","index","item","length","yValues","d","Math","min","max","bubbleDataChanged","newValue","drawOrUpdateChart","propertiesChanged","GetOption","formattedYLabel","series","chart","width","height","type","events","dataPointSelection","event","chartContext","config","seriesIndex","dataPointIndex","dataPoint","x","y","zoomXPad","zoomYPad","updateOptions","xaxis","tickAmount","yaxis","beforeResetZoom","undefined","dataLabels","enabled","fill","opacity","title","text","labels","formatter","value","parseInt","rotate","hideOverlappingLabels","toFixed","toString","myWidthChanged","window","alert","chartContainer","el","shadowRoot","querySelector","newOptions","ApexCharts","render","componentDidLoad","disconnectedCallback","destroy","h","key","id"],"sources":["src/components/Charts-Component/bubble-chart/bubble-chart.css?tag=bubble-chart&encapsulation=shadow","src/components/Charts-Component/bubble-chart/bubble-chart.tsx"],"sourcesContent":[null,"import ApexCharts from 'apexcharts'\r\nimport { Component,Element,Prop,State,Watch,h } from '@stencil/core';\r\n\r\n\r\n\r\ninterface BubbleDataType {\r\n  country: string;\r\n  population: number;\r\n  world_land_area_percentage: number;\r\n}\r\n\r\nconst DEFAULT_BUBBLE_DATA: BubbleDataType[] = [\r\n  { \"country\": \"China\", \"population\": 1416000000, \"world_land_area_percentage\": 6.30 },\r\n  { \"country\": \"India\", \"population\": 1464000000, \"world_land_area_percentage\": 2.00 },\r\n  { \"country\": \"United States\", \"population\": 347300000, \"world_land_area_percentage\": 6.14 },\r\n  { \"country\": \"Indonesia\", \"population\": 285700000, \"world_land_area_percentage\": 1.22 },\r\n  { \"country\": \"Pakistan\", \"population\": 255200000, \"world_land_area_percentage\": 0.52 },\r\n  { \"country\": \"Nigeria\", \"population\": 237500000, \"world_land_area_percentage\": 0.61 },\r\n  { \"country\": \"Brazil\", \"population\": 212800000, \"world_land_area_percentage\": 5.61 },\r\n  { \"country\": \"Bangladesh\", \"population\": 175700000, \"world_land_area_percentage\": 0.10 },\r\n  { \"country\": \"Russia\", \"population\": 144000000, \"world_land_area_percentage\": 11.00 },\r\n  { \"country\": \"Mexico\", \"population\": 131900000, \"world_land_area_percentage\": 1.31 },\r\n  { \"country\": \"Japan\", \"population\": 123100000, \"world_land_area_percentage\": 0.24 },\r\n  { \"country\": \"Ethiopia\", \"population\": 135500000, \"world_land_area_percentage\": 0.67 },\r\n  { \"country\": \"Philippines\", \"population\": 116800000, \"world_land_area_percentage\": 0.20 },\r\n  { \"country\": \"Egypt\", \"population\": 118400000, \"world_land_area_percentage\": 0.67 },\r\n  { \"country\": \"DR Congo\", \"population\": 112800000, \"world_land_area_percentage\": 1.52 },\r\n  { \"country\": \"Germany\", \"population\": 84100000, \"world_land_area_percentage\": 0.23 },\r\n  { \"country\": \"United Kingdom\", \"population\": 69600000, \"world_land_area_percentage\": 0.16 },\r\n  { \"country\": \"France\", \"population\": 66700000, \"world_land_area_percentage\": 0.37 },\r\n  { \"country\": \"Canada\", \"population\": 40100000, \"world_land_area_percentage\": 6.11 },\r\n  { \"country\": \"Australia\", \"population\": 27000000, \"world_land_area_percentage\": 5.16 },\r\n  { \"country\": \"South Africa\", \"population\": 60400000, \"world_land_area_percentage\": 0.81 },\r\n  { \"country\": \"Italy\", \"population\": 58900000, \"world_land_area_percentage\": 0.20 },\r\n  { \"country\": \"Myanmar\", \"population\": 54200000, \"world_land_area_percentage\": 0.45 },\r\n  { \"country\": \"Kenya\", \"population\": 55100000, \"world_land_area_percentage\": 0.39 },\r\n  { \"country\": \"Colombia\", \"population\": 52300000, \"world_land_area_percentage\": 0.75 },\r\n  { \"country\": \"Spain\", \"population\": 47600000, \"world_land_area_percentage\": 0.34 },\r\n  { \"country\": \"Argentina\", \"population\": 46000000, \"world_land_area_percentage\": 1.86 },\r\n  { \"country\": \"Algeria\", \"population\": 44700000, \"world_land_area_percentage\": 1.56 },\r\n  { \"country\": \"Poland\", \"population\": 37600000, \"world_land_area_percentage\": 0.21 },\r\n  { \"country\": \"Uzbekistan\", \"population\": 35400000, \"world_land_area_percentage\": 0.29 },\r\n  { \"country\": \"Saudi Arabia\", \"population\": 36900000, \"world_land_area_percentage\": 1.44 },\r\n  { \"country\": \"Ukraine\", \"population\": 36700000, \"world_land_area_percentage\": 0.40 },\r\n  { \"country\": \"Morocco\", \"population\": 37900000, \"world_land_area_percentage\": 0.30 },\r\n  { \"country\": \"Peru\", \"population\": 34000000, \"world_land_area_percentage\": 0.85 },\r\n  { \"country\": \"Angola\", \"population\": 36100000, \"world_land_area_percentage\": 0.85 },\r\n  { \"country\": \"Malaysia\", \"population\": 33900000, \"world_land_area_percentage\": 0.22 },\r\n  { \"country\": \"Venezuela\", \"population\": 29300000, \"world_land_area_percentage\": 0.67 },\r\n  { \"country\": \"Ghana\", \"population\": 34000000, \"world_land_area_percentage\": 0.15 },\r\n  { \"country\": \"Afghanistan\", \"population\": 41100000, \"world_land_area_percentage\": 0.44 },\r\n  { \"country\": \"Nepal\", \"population\": 30600000, \"world_land_area_percentage\": 0.10 },\r\n  { \"country\": \"Yemen\", \"population\": 33700000, \"world_land_area_percentage\": 0.35 }\r\n];\r\n\r\n@Component(\r\n{\r\n    tag:\"bubble-chart\",\r\n    styleUrl:\"bubble-chart.css\",\r\n    shadow:true\r\n})\r\nexport class BubbleChart\r\n{\r\n    @Element() el!:HTMLElement\r\n\r\n    @Prop() myHeight:number = 350;\r\n    @Prop() myTitle:string = 'Country Population vs. Land Area Percentage';\r\n    @Prop() xTitle:string = 'Country (Hover for Name)';\r\n    @Prop() yTitle:string = 'Population';\r\n    @Prop() myWidth:number = 100;\r\n\r\n    @State() private charWidth!:string;\r\n\r\n    @Prop() bubbleData: BubbleDataType[] = DEFAULT_BUBBLE_DATA;\r\n\r\n    @State() private seriesData!: ApexAxisChartSeries;\r\n    @State() private countyName!: string[];\r\n\r\n    private apexChartInstance!:ApexCharts\r\n\r\n    //For the zoom effect\r\n    private originalXMin: number = 0;\r\n    private originalXMax: number = 0;\r\n    private originalYMin: number = 0;\r\n    private originalYMax: number = 0;\r\n\r\n    constructor()\r\n    {\r\n        this.ProcessBubbleData(this.bubbleData|| DEFAULT_BUBBLE_DATA);\r\n\r\n        this.charWidth= `${this.myWidth}%`;\r\n    }\r\n\r\n    private ProcessBubbleData(TheData: BubbleDataType[])\r\n    {\r\n        this.seriesData=[{\r\n            name: 'Population vs. Land Area Percentage',\r\n            data: TheData.map((items,index)=>[\r\n                index,\r\n                items.population,\r\n                items.world_land_area_percentage\r\n            ]),\r\n        }];\r\n\r\n        this.countyName = TheData.map(item => item.country);\r\n\r\n        // Calculate and store original axis ranges\r\n        this.originalXMin = -0.5; // Small padding\r\n        this.originalXMax = this.countyName.length - 0.5; // Small padding\r\n\r\n        const yValues = TheData.map(d => d.population);\r\n        this.originalYMin = Math.min(...yValues) * 0.9; // 90% of min value\r\n        this.originalYMax = Math.max(...yValues) * 1.1; // 110% of max value\r\n    }\r\n\r\n    @Watch('bubbleData')\r\n    bubbleDataChanged(newValue: BubbleDataType[]|undefined)\r\n    {\r\n        this.ProcessBubbleData(newValue|| DEFAULT_BUBBLE_DATA);\r\n        this.drawOrUpdateChart();\r\n    }\r\n\r\n    @Watch('myHeight')\r\n    @Watch('myTitle')\r\n    @Watch('xTitle')\r\n    @Watch('yTitle')\r\n    propertiesChanged()\r\n    {\r\n        this.drawOrUpdateChart();\r\n    }\r\n\r\n    private GetOption():ApexCharts.ApexOptions {\r\n\r\n        const formattedYLabel = this.countyName;// Store country names in a variable for use in the formatter\r\n\r\n        return {\r\n            series: this.seriesData,\r\n            chart: {\r\n                width: this.charWidth,\r\n                height: this.myHeight,\r\n                type: 'bubble',\r\n                events: {\r\n                    dataPointSelection: (event, chartContext, config) => {\r\n                        const seriesIndex = config.seriesIndex;\r\n                        const dataPointIndex = config.dataPointIndex;\r\n\r\n                        if (seriesIndex !== -1 && dataPointIndex !== -1) {\r\n                        const dataPoint = this.seriesData[seriesIndex].data[dataPointIndex] as [number, number, number];\r\n                        const x = dataPoint[0];\r\n                        const y = dataPoint[1];\r\n\r\n                        // Calculate new zoom ranges\r\n                        const zoomXPad = 0.5; // Fixed padding for X\r\n                        const zoomYPad = y * 0.2; // Relative padding for Y\r\n\r\n                        this.apexChartInstance.updateOptions({\r\n                            xaxis: { min: x - zoomXPad, max: x + zoomXPad, tickAmount: 1 },\r\n                            yaxis: { min: y - zoomYPad, max: y + zoomYPad, tickAmount: 2 },\r\n                        },true,true); // Update options without re-rendering or animation\r\n                        }\r\n                    },\r\n                    beforeResetZoom: () => {\r\n                        // Reset to original zoom levels\r\n                        this.apexChartInstance.updateOptions({\r\n                        xaxis: { min: this.originalXMin, max: this.originalXMax, tickAmount: undefined },\r\n                        yaxis: { min: this.originalYMin, max: this.originalYMax, tickAmount: undefined },\r\n                        },true,true )\r\n                    }\r\n            },\r\n            },\r\n            dataLabels: {\r\n                enabled: false // Usually disabled for bubble charts to avoid clutter\r\n            },\r\n            fill: {\r\n                opacity: 0.8\r\n            },\r\n            title: {\r\n                text: this.myTitle\r\n            },\r\n            xaxis:{\r\n                type: 'numeric', // Important: Bubble chart X-axis is numerical\r\n                title: {\r\n                    text: this.xTitle, // Informative title for the X-axis\r\n                    },\r\n                labels: {\r\n                formatter: (value: string) => {\r\n                // Use countryNames array to display actual country names on the X-axis\r\n                const index = parseInt(value, 10); // Convert string to number\r\n                return formattedYLabel[index] || 'NoCountry'; // Return country name, or empty string if index is out of bounds\r\n                },\r\n                    rotate: -45, // Rotate labels to prevent overlap\r\n                    hideOverlappingLabels: true, // Hide labels if they overlap\r\n                    },\r\n            },\r\n            yaxis: {\r\n                title: {\r\n                    text: this.yTitle\r\n                },\r\n                labels: {\r\n                    formatter: function (value:number) {\r\n                        // Format population for readability (e.g., in millions/billions)\r\n                        if (value >= 1_000_000_000) return (value / 1_000_000_000).toFixed(1) + 'B';\r\n                        if (value >= 1_000_000) return (value / 1_000_000).toFixed(0) + 'M';\r\n                        return value.toString();\r\n                    }\r\n                },\r\n            },\r\n        }\r\n    }\r\n\r\n    @Watch('myWidth')\r\n    myWidthChanged(newValue: number)\r\n    {\r\n        if (newValue < 0 || newValue > 100) {\r\n            window.alert('Width must be between 0 and 100');\r\n            return;\r\n        }\r\n        this.charWidth = `${newValue}%`; // Update the width of the chart\r\n        this.drawOrUpdateChart(); // Redraw the chart with the new width\r\n    }\r\n\r\n\r\n    drawOrUpdateChart()\r\n    {\r\n        const chartContainer = this.el.shadowRoot?.querySelector(\"#chartBubble\")\r\n        if(!chartContainer)\r\n        {\r\n            window.alert(\"Chart container not found\");\r\n            return;\r\n        }\r\n\r\n        const newOptions = this.GetOption();\r\n\r\n        if(!this.apexChartInstance)// If the chart instance doesn't exist, create a new one\r\n        {\r\n            this.apexChartInstance = new ApexCharts(chartContainer, newOptions);\r\n            this.apexChartInstance.render();\r\n        }\r\n        else // If the chart instance already exists, update it with new options\r\n        {\r\n            this.apexChartInstance.updateOptions(newOptions,false, false);// Update the chart options without redrawing the chart\r\n        }\r\n\r\n    }\r\n\r\n    componentDidLoad()\r\n    {\r\n        this.drawOrUpdateChart();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        if (this.apexChartInstance) {\r\n          this.apexChartInstance.destroy(); // Clean up chart instance to prevent memory leaks\r\n        }\r\n    }\r\n    render()\r\n    {\r\n        return(<div id=\"chartBubble\"></div>)\r\n    }\r\n}"],"mappings":"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","ignoreList":[]}