{"version":3,"file":"bubble-chart.entry.js","sources":["src/components/Charts-Component/bubble-chart/bubble-chart.css?tag=bubble-chart&encapsulation=shadow","src/components/Charts-Component/bubble-chart/bubble-chart.tsx"],"sourcesContent":["#chartBubble {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n:host {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  #chartBubble {\r\n    height: 300px !important;\r\n  }\r\n}","import ApexCharts from 'apexcharts'\nimport { Component,Element,Prop,State,Watch,h } from '@stencil/core';\n\n\n\ninterface BubbleDataType {\n  country: string;\n  population: number;\n  world_land_area_percentage: number;\n}\n\nconst DEFAULT_BUBBLE_DATA: BubbleDataType[] = [\n  { \"country\": \"China\", \"population\": 1416000000, \"world_land_area_percentage\": 6.30 },\n  { \"country\": \"India\", \"population\": 1464000000, \"world_land_area_percentage\": 2.00 },\n  { \"country\": \"United States\", \"population\": 347300000, \"world_land_area_percentage\": 6.14 },\n  { \"country\": \"Indonesia\", \"population\": 285700000, \"world_land_area_percentage\": 1.22 },\n  { \"country\": \"Pakistan\", \"population\": 255200000, \"world_land_area_percentage\": 0.52 },\n  { \"country\": \"Nigeria\", \"population\": 237500000, \"world_land_area_percentage\": 0.61 },\n  { \"country\": \"Brazil\", \"population\": 212800000, \"world_land_area_percentage\": 5.61 },\n  { \"country\": \"Bangladesh\", \"population\": 175700000, \"world_land_area_percentage\": 0.10 },\n  { \"country\": \"Russia\", \"population\": 144000000, \"world_land_area_percentage\": 11.00 },\n  { \"country\": \"Mexico\", \"population\": 131900000, \"world_land_area_percentage\": 1.31 },\n  { \"country\": \"Japan\", \"population\": 123100000, \"world_land_area_percentage\": 0.24 },\n  { \"country\": \"Ethiopia\", \"population\": 135500000, \"world_land_area_percentage\": 0.67 },\n  { \"country\": \"Philippines\", \"population\": 116800000, \"world_land_area_percentage\": 0.20 },\n  { \"country\": \"Egypt\", \"population\": 118400000, \"world_land_area_percentage\": 0.67 },\n  { \"country\": \"DR Congo\", \"population\": 112800000, \"world_land_area_percentage\": 1.52 },\n  { \"country\": \"Germany\", \"population\": 84100000, \"world_land_area_percentage\": 0.23 },\n  { \"country\": \"United Kingdom\", \"population\": 69600000, \"world_land_area_percentage\": 0.16 },\n  { \"country\": \"France\", \"population\": 66700000, \"world_land_area_percentage\": 0.37 },\n  { \"country\": \"Canada\", \"population\": 40100000, \"world_land_area_percentage\": 6.11 },\n  { \"country\": \"Australia\", \"population\": 27000000, \"world_land_area_percentage\": 5.16 },\n  { \"country\": \"South Africa\", \"population\": 60400000, \"world_land_area_percentage\": 0.81 },\n  { \"country\": \"Italy\", \"population\": 58900000, \"world_land_area_percentage\": 0.20 },\n  { \"country\": \"Myanmar\", \"population\": 54200000, \"world_land_area_percentage\": 0.45 },\n  { \"country\": \"Kenya\", \"population\": 55100000, \"world_land_area_percentage\": 0.39 },\n  { \"country\": \"Colombia\", \"population\": 52300000, \"world_land_area_percentage\": 0.75 },\n  { \"country\": \"Spain\", \"population\": 47600000, \"world_land_area_percentage\": 0.34 },\n  { \"country\": \"Argentina\", \"population\": 46000000, \"world_land_area_percentage\": 1.86 },\n  { \"country\": \"Algeria\", \"population\": 44700000, \"world_land_area_percentage\": 1.56 },\n  { \"country\": \"Poland\", \"population\": 37600000, \"world_land_area_percentage\": 0.21 },\n  { \"country\": \"Uzbekistan\", \"population\": 35400000, \"world_land_area_percentage\": 0.29 },\n  { \"country\": \"Saudi Arabia\", \"population\": 36900000, \"world_land_area_percentage\": 1.44 },\n  { \"country\": \"Ukraine\", \"population\": 36700000, \"world_land_area_percentage\": 0.40 },\n  { \"country\": \"Morocco\", \"population\": 37900000, \"world_land_area_percentage\": 0.30 },\n  { \"country\": \"Peru\", \"population\": 34000000, \"world_land_area_percentage\": 0.85 },\n  { \"country\": \"Angola\", \"population\": 36100000, \"world_land_area_percentage\": 0.85 },\n  { \"country\": \"Malaysia\", \"population\": 33900000, \"world_land_area_percentage\": 0.22 },\n  { \"country\": \"Venezuela\", \"population\": 29300000, \"world_land_area_percentage\": 0.67 },\n  { \"country\": \"Ghana\", \"population\": 34000000, \"world_land_area_percentage\": 0.15 },\n  { \"country\": \"Afghanistan\", \"population\": 41100000, \"world_land_area_percentage\": 0.44 },\n  { \"country\": \"Nepal\", \"population\": 30600000, \"world_land_area_percentage\": 0.10 },\n  { \"country\": \"Yemen\", \"population\": 33700000, \"world_land_area_percentage\": 0.35 }\n];\n\n@Component(\n{\n    tag:\"bubble-chart\",\n    styleUrl:\"bubble-chart.css\",\n    shadow:true\n})\nexport class BubbleChart\n{\n    @Element() el!:HTMLElement\n\n    @Prop() myHeight:number = 350;\n    @Prop() myTitle:string = 'Country Population vs. Land Area Percentage';\n    @Prop() xTitle:string = 'Country (Hover for Name)';\n    @Prop() yTitle:string = 'Population';\n    @Prop() myWidth: string = '100%'; // Use string to accept % or px\n    @State() private charWidth: string = '100%'; // Initial default\n\n    @Prop() bubbleData: BubbleDataType[] = DEFAULT_BUBBLE_DATA;\n\n    @State() private seriesData!: ApexAxisChartSeries;\n    @State() private countyName!: string[];\n\n    private apexChartInstance!:ApexCharts\n\n    //For the zoom effect\n    private originalXMin: number = 0;\n    private originalXMax: number = 0;\n    private originalYMin: number = 0;\n    private originalYMax: number = 0;\n\n    private resizeObserver!: ResizeObserver;\n\n    private observeResize() {\n        this.resizeObserver = new ResizeObserver(() => {\n            this.drawOrUpdateChart();\n        });\n\n        const container = this.el.shadowRoot?.querySelector(\"#chartBubble\");\n        if (container) {\n            this.resizeObserver.observe(container);\n        }\n    }\n\n    constructor()\n    {\n        this.ProcessBubbleData(this.bubbleData|| DEFAULT_BUBBLE_DATA);\n\n        this.charWidth = this.myWidth;\n    }\n\n    private ProcessBubbleData(TheData: BubbleDataType[])\n    {\n        this.seriesData=[{\n            name: 'Population vs. Land Area Percentage',\n            data: TheData.map((items)=>({\n                x: items.country,\n                y: items.population,\n                z: items.world_land_area_percentage,\n            })),\n        }];\n\n        this.countyName = TheData.map(item => item.country);\n\n        // Calculate and store original axis ranges\n        this.originalXMin = -0.5; // Small padding\n        this.originalXMax = this.countyName.length - 0.5; // Small padding\n\n        const yValues = TheData.map(d => d.population);\n        this.originalYMin = Math.min(...yValues) * 0.9; // 90% of min value\n        this.originalYMax = Math.max(...yValues) * 1.1; // 110% of max value\n    }\n\n    @Watch('bubbleData')\n    bubbleDataChanged(newValue: BubbleDataType[]|undefined)\n    {\n        this.ProcessBubbleData(newValue|| DEFAULT_BUBBLE_DATA);\n        this.drawOrUpdateChart();\n    }\n\n    @Watch('myHeight')\n    @Watch('myTitle')\n    @Watch('xTitle')\n    @Watch('yTitle')\n    propertiesChanged()\n    {\n        this.observeResize();\n        this.drawOrUpdateChart();\n    }\n\n    private GetOption(): ApexCharts.ApexOptions {\n      return {\n        series: this.seriesData,\n        chart: {\n          width: this.charWidth,\n          height: this.myHeight,\n          type: 'bubble',\n        },\n        colors: ['#4dabf7'], // ðŸ”µ bubble color\n        stroke: {\n          show: true,\n          width: 1,\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          opacity: 0.8\n        },\n        title: {\n          text: this.myTitle,\n          style: {\n            color: 'var(--theme-color-std-text)',\n            fontSize: '16px',\n            fontWeight: 'bold'\n          }\n        },\n        xaxis: {\n          type: 'category',\n          categories: this.countyName,\n          labels: {\n            rotate: -90,\n            style: {\n              fontSize: '10px',\n              colors: 'var(--theme-color-std-text)'\n            }\n          }\n        },\n        yaxis: {\n          min: this.originalYMin,\n          max: this.originalYMax,\n          title: {\n            text: this.yTitle,\n            style: {\n              color: 'var(--theme-color-std-text)'\n            }\n          },\n          labels: {\n            formatter: function (value: number) {\n              if (value >= 1_000_000_000) return (value / 1_000_000_000).toFixed(1) + 'B';\n              if (value >= 1_000_000) return (value / 1_000_000).toFixed(0) + 'M';\n              return value.toString();\n            },\n            style: {\n              colors: 'var(--theme-chart-ticks)'\n            }\n          }\n        }\n      };\n    }\n\n\n    @Watch('myWidth')\n    myWidthChanged(newValue: string)\n    {\n        const percentage = parseFloat(newValue);\n        if (newValue.includes('%') && (percentage < 0 || percentage > 100)) {\n            window.alert('Width percentage must be between 0% and 100%');\n            return;\n        }\n        this.charWidth = `${newValue}%`; // Update the width of the chart\n        this.drawOrUpdateChart(); // Redraw the chart with the new width\n    }\n\n\n    drawOrUpdateChart()\n    {\n        const chartContainer = this.el.shadowRoot?.querySelector(\"#chartBubble\")\n        if(!chartContainer)\n        {\n            window.alert(\"Chart container not found\");\n            return;\n        }\n\n        const newOptions = this.GetOption();\n\n        if(!this.apexChartInstance)// If the chart instance doesn't exist, create a new one\n        {\n            this.apexChartInstance = new ApexCharts(chartContainer, newOptions);\n            this.apexChartInstance.render();\n        }\n        else // If the chart instance already exists, update it with new options\n        {\n            this.apexChartInstance.updateOptions(newOptions,false, false);// Update the chart options without redrawing the chart\n        }\n\n    }\n\n    componentDidLoad()\n    {\n        this.observeResize();\n        this.drawOrUpdateChart();\n    }\n\n    disconnectedCallback() {\n        if (this.apexChartInstance) {\n          this.apexChartInstance.destroy(); // Clean up chart instance to prevent memory leaks\n        }\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n    }\n    render()\n    {\n        const estimatedWidth = this.countyName.length * 30;\n        return (\n          <div>\n            <ix-style-loader></ix-style-loader>\n\n            <div style={{ overflowX: 'auto', width: '100%' }}>\n                <div\n                id=\"chartBubble\"\n                style={{ minWidth: `${estimatedWidth}px`, width: this.charWidth }}\n                ></div>\n            </div>\n          </div>\n        );\n    }\n}\n"],"names":["ApexCharts"],"mappings":"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"}