{"version":3,"file":"date-input.js","sourceRoot":"","sources":["../../../../../src/components/Html-Tags-Component/date-input/date-input.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAgB,CAAC,EAAE,MAAM,eAAe,CAAC;AAOxE,MAAM,OAAO,SAAS;IAIZ,IAAI,CAAU;IAKd,KAAK,CAAU;IAKiB,KAAK,GAAW,EAAE,CAAC;IAKnD,GAAG,CAAU;IAKb,GAAG,CAAU;IAKb,QAAQ,GAAY,KAAK,CAAC;IAKzB,QAAQ,CAAmC;IAE5C,YAAY,GAAG,CAAC,KAAY,EAAE,EAAE;QACtC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,OAAO;QACT,CAAC;QAED,MAAM,KAAK,GAAG,KAAK,CAAC,MAA0B,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACzB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC;IAEF,MAAM;QACJ,OAAO,CACL,4DAAK,KAAK,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,wBAAwB,EAAE,IAAI,CAAC,QAAQ,EAAE;YAC3E,8DAAO,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAC,YAAY,IAAE,IAAI,CAAC,KAAK,CAAS;YAClE,8DACE,IAAI,EAAC,MAAM,EACX,EAAE,EAAE,IAAI,CAAC,IAAI,EACb,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,KAAK,EAAC,YAAY,EAClB,WAAW,EAAC,YAAY,GACxB,CACE,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, Event, EventEmitter, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'date-input',\r\n  styleUrl: 'date-input.css',\r\n  shadow: true,\r\n})\r\nexport class DateInput {\r\n  /**\r\n   * The name of the input field.\r\n   */\r\n  @Prop() name!: string;\r\n\r\n  /**\r\n   * The label for the input field.\r\n   */\r\n  @Prop() label!: string;\r\n\r\n  /**\r\n   * The current value of the date input.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) value: string = '';\r\n\r\n  /**\r\n   * The minimum allowed date (YYYY-MM-DD).\r\n   */\r\n  @Prop() min?: string;\r\n\r\n  /**\r\n   * The maximum allowed date (YYYY-MM-DD).\r\n   */\r\n  @Prop() max?: string;\r\n\r\n  /**\r\n   * Whether the input is disabled.\r\n   */\r\n  @Prop() disabled: boolean = false;\r\n\r\n  /**\r\n   * Event emitted when the input value changes.\r\n   */\r\n  @Event() myChange: EventEmitter<string> | undefined;\r\n\r\n  private handleChange = (event: Event) => {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n\r\n    const input = event.target as HTMLInputElement;\r\n    this.value = input.value;\r\n    this.myChange?.emit(this.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div class={{ 'date-wrapper': true, 'date-wrapper--disabled': this.disabled }}>\r\n        <label htmlFor={this.name} class=\"date-label\">{this.label}</label>\r\n        <input\r\n          type=\"date\"\r\n          id={this.name}\r\n          name={this.name}\r\n          value={this.value}\r\n          min={this.min}\r\n          max={this.max}\r\n          disabled={this.disabled}\r\n          onChange={this.handleChange}\r\n          class=\"date-field\"\r\n          placeholder=\"YYYY-MM-DD\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}