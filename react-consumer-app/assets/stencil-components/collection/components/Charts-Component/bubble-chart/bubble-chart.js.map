{"version":3,"file":"bubble-chart.js","sourceRoot":"","sources":["../../../../../src/components/Charts-Component/bubble-chart/bubble-chart.tsx"],"names":[],"mappings":"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","sourcesContent":["import ApexCharts from 'apexcharts'\r\nimport { Component,Element,Prop,State,Watch,h } from '@stencil/core';\r\n\r\n\r\n\r\ninterface BubbleDataType {\r\n  country: string;\r\n  population: number;\r\n  world_land_area_percentage: number;\r\n}\r\n\r\nconst DEFAULT_BUBBLE_DATA: BubbleDataType[] = [\r\n  { \"country\": \"China\", \"population\": 1416000000, \"world_land_area_percentage\": 6.30 },\r\n  { \"country\": \"India\", \"population\": 1464000000, \"world_land_area_percentage\": 2.00 },\r\n  { \"country\": \"United States\", \"population\": 347300000, \"world_land_area_percentage\": 6.14 },\r\n  { \"country\": \"Indonesia\", \"population\": 285700000, \"world_land_area_percentage\": 1.22 },\r\n  { \"country\": \"Pakistan\", \"population\": 255200000, \"world_land_area_percentage\": 0.52 },\r\n  { \"country\": \"Nigeria\", \"population\": 237500000, \"world_land_area_percentage\": 0.61 },\r\n  { \"country\": \"Brazil\", \"population\": 212800000, \"world_land_area_percentage\": 5.61 },\r\n  { \"country\": \"Bangladesh\", \"population\": 175700000, \"world_land_area_percentage\": 0.10 },\r\n  { \"country\": \"Russia\", \"population\": 144000000, \"world_land_area_percentage\": 11.00 },\r\n  { \"country\": \"Mexico\", \"population\": 131900000, \"world_land_area_percentage\": 1.31 },\r\n  { \"country\": \"Japan\", \"population\": 123100000, \"world_land_area_percentage\": 0.24 },\r\n  { \"country\": \"Ethiopia\", \"population\": 135500000, \"world_land_area_percentage\": 0.67 },\r\n  { \"country\": \"Philippines\", \"population\": 116800000, \"world_land_area_percentage\": 0.20 },\r\n  { \"country\": \"Egypt\", \"population\": 118400000, \"world_land_area_percentage\": 0.67 },\r\n  { \"country\": \"DR Congo\", \"population\": 112800000, \"world_land_area_percentage\": 1.52 },\r\n  { \"country\": \"Germany\", \"population\": 84100000, \"world_land_area_percentage\": 0.23 },\r\n  { \"country\": \"United Kingdom\", \"population\": 69600000, \"world_land_area_percentage\": 0.16 },\r\n  { \"country\": \"France\", \"population\": 66700000, \"world_land_area_percentage\": 0.37 },\r\n  { \"country\": \"Canada\", \"population\": 40100000, \"world_land_area_percentage\": 6.11 },\r\n  { \"country\": \"Australia\", \"population\": 27000000, \"world_land_area_percentage\": 5.16 },\r\n  { \"country\": \"South Africa\", \"population\": 60400000, \"world_land_area_percentage\": 0.81 },\r\n  { \"country\": \"Italy\", \"population\": 58900000, \"world_land_area_percentage\": 0.20 },\r\n  { \"country\": \"Myanmar\", \"population\": 54200000, \"world_land_area_percentage\": 0.45 },\r\n  { \"country\": \"Kenya\", \"population\": 55100000, \"world_land_area_percentage\": 0.39 },\r\n  { \"country\": \"Colombia\", \"population\": 52300000, \"world_land_area_percentage\": 0.75 },\r\n  { \"country\": \"Spain\", \"population\": 47600000, \"world_land_area_percentage\": 0.34 },\r\n  { \"country\": \"Argentina\", \"population\": 46000000, \"world_land_area_percentage\": 1.86 },\r\n  { \"country\": \"Algeria\", \"population\": 44700000, \"world_land_area_percentage\": 1.56 },\r\n  { \"country\": \"Poland\", \"population\": 37600000, \"world_land_area_percentage\": 0.21 },\r\n  { \"country\": \"Uzbekistan\", \"population\": 35400000, \"world_land_area_percentage\": 0.29 },\r\n  { \"country\": \"Saudi Arabia\", \"population\": 36900000, \"world_land_area_percentage\": 1.44 },\r\n  { \"country\": \"Ukraine\", \"population\": 36700000, \"world_land_area_percentage\": 0.40 },\r\n  { \"country\": \"Morocco\", \"population\": 37900000, \"world_land_area_percentage\": 0.30 },\r\n  { \"country\": \"Peru\", \"population\": 34000000, \"world_land_area_percentage\": 0.85 },\r\n  { \"country\": \"Angola\", \"population\": 36100000, \"world_land_area_percentage\": 0.85 },\r\n  { \"country\": \"Malaysia\", \"population\": 33900000, \"world_land_area_percentage\": 0.22 },\r\n  { \"country\": \"Venezuela\", \"population\": 29300000, \"world_land_area_percentage\": 0.67 },\r\n  { \"country\": \"Ghana\", \"population\": 34000000, \"world_land_area_percentage\": 0.15 },\r\n  { \"country\": \"Afghanistan\", \"population\": 41100000, \"world_land_area_percentage\": 0.44 },\r\n  { \"country\": \"Nepal\", \"population\": 30600000, \"world_land_area_percentage\": 0.10 },\r\n  { \"country\": \"Yemen\", \"population\": 33700000, \"world_land_area_percentage\": 0.35 }\r\n];\r\n\r\n@Component(\r\n{\r\n    tag:\"bubble-chart\",\r\n    styleUrl:\"bubble-chart.css\",\r\n    shadow:true\r\n})\r\nexport class BubbleChart\r\n{\r\n    @Element() el!:HTMLElement\r\n\r\n    @Prop() myHeight:number = 350;\r\n    @Prop() myTitle:string = 'Country Population vs. Land Area Percentage';\r\n    @Prop() xTitle:string = 'Country (Hover for Name)';\r\n    @Prop() yTitle:string = 'Population';\r\n    @Prop() myWidth:number = 100;\r\n\r\n    @State() private charWidth!:string;\r\n\r\n    @Prop() bubbleData: BubbleDataType[] = DEFAULT_BUBBLE_DATA;\r\n\r\n    @State() private seriesData!: ApexAxisChartSeries;\r\n    @State() private countyName!: string[];\r\n\r\n    private apexChartInstance!:ApexCharts\r\n\r\n    //For the zoom effect\r\n    private originalXMin: number = 0;\r\n    private originalXMax: number = 0;\r\n    private originalYMin: number = 0;\r\n    private originalYMax: number = 0;\r\n\r\n    constructor()\r\n    {\r\n        this.ProcessBubbleData(this.bubbleData|| DEFAULT_BUBBLE_DATA);\r\n\r\n        this.charWidth= `${this.myWidth}%`;\r\n    }\r\n\r\n    private ProcessBubbleData(TheData: BubbleDataType[])\r\n    {\r\n        this.seriesData=[{\r\n            name: 'Population vs. Land Area Percentage',\r\n            data: TheData.map((items,index)=>[\r\n                index,\r\n                items.population,\r\n                items.world_land_area_percentage\r\n            ]),\r\n        }];\r\n\r\n        this.countyName = TheData.map(item => item.country);\r\n\r\n        // Calculate and store original axis ranges\r\n        this.originalXMin = -0.5; // Small padding\r\n        this.originalXMax = this.countyName.length - 0.5; // Small padding\r\n\r\n        const yValues = TheData.map(d => d.population);\r\n        this.originalYMin = Math.min(...yValues) * 0.9; // 90% of min value\r\n        this.originalYMax = Math.max(...yValues) * 1.1; // 110% of max value\r\n    }\r\n\r\n    @Watch('bubbleData')\r\n    bubbleDataChanged(newValue: BubbleDataType[]|undefined)\r\n    {\r\n        this.ProcessBubbleData(newValue|| DEFAULT_BUBBLE_DATA);\r\n        this.drawOrUpdateChart();\r\n    }\r\n\r\n    @Watch('myHeight')\r\n    @Watch('myTitle')\r\n    @Watch('xTitle')\r\n    @Watch('yTitle')\r\n    propertiesChanged()\r\n    {\r\n        this.drawOrUpdateChart();\r\n    }\r\n\r\n    private GetOption():ApexCharts.ApexOptions {\r\n\r\n        const formattedYLabel = this.countyName;// Store country names in a variable for use in the formatter\r\n\r\n        return {\r\n            series: this.seriesData,\r\n            chart: {\r\n                width: this.charWidth,\r\n                height: this.myHeight,\r\n                type: 'bubble',\r\n                events: {\r\n                    dataPointSelection: (event, chartContext, config) => {\r\n                        const seriesIndex = config.seriesIndex;\r\n                        const dataPointIndex = config.dataPointIndex;\r\n\r\n                        if (seriesIndex !== -1 && dataPointIndex !== -1) {\r\n                        const dataPoint = this.seriesData[seriesIndex].data[dataPointIndex] as [number, number, number];\r\n                        const x = dataPoint[0];\r\n                        const y = dataPoint[1];\r\n\r\n                        // Calculate new zoom ranges\r\n                        const zoomXPad = 0.5; // Fixed padding for X\r\n                        const zoomYPad = y * 0.2; // Relative padding for Y\r\n\r\n                        this.apexChartInstance.updateOptions({\r\n                            xaxis: { min: x - zoomXPad, max: x + zoomXPad, tickAmount: 1 },\r\n                            yaxis: { min: y - zoomYPad, max: y + zoomYPad, tickAmount: 2 },\r\n                        },true,true); // Update options without re-rendering or animation\r\n                        }\r\n                    },\r\n                    beforeResetZoom: () => {\r\n                        // Reset to original zoom levels\r\n                        this.apexChartInstance.updateOptions({\r\n                        xaxis: { min: this.originalXMin, max: this.originalXMax, tickAmount: undefined },\r\n                        yaxis: { min: this.originalYMin, max: this.originalYMax, tickAmount: undefined },\r\n                        },true,true )\r\n                    }\r\n            },\r\n            },\r\n            dataLabels: {\r\n                enabled: false // Usually disabled for bubble charts to avoid clutter\r\n            },\r\n            fill: {\r\n                opacity: 0.8\r\n            },\r\n            title: {\r\n                text: this.myTitle\r\n            },\r\n            xaxis:{\r\n                type: 'numeric', // Important: Bubble chart X-axis is numerical\r\n                title: {\r\n                    text: this.xTitle, // Informative title for the X-axis\r\n                    },\r\n                labels: {\r\n                formatter: (value: string) => {\r\n                // Use countryNames array to display actual country names on the X-axis\r\n                const index = parseInt(value, 10); // Convert string to number\r\n                return formattedYLabel[index] || 'NoCountry'; // Return country name, or empty string if index is out of bounds\r\n                },\r\n                    rotate: -45, // Rotate labels to prevent overlap\r\n                    hideOverlappingLabels: true, // Hide labels if they overlap\r\n                    },\r\n            },\r\n            yaxis: {\r\n                title: {\r\n                    text: this.yTitle\r\n                },\r\n                labels: {\r\n                    formatter: function (value:number) {\r\n                        // Format population for readability (e.g., in millions/billions)\r\n                        if (value >= 1_000_000_000) return (value / 1_000_000_000).toFixed(1) + 'B';\r\n                        if (value >= 1_000_000) return (value / 1_000_000).toFixed(0) + 'M';\r\n                        return value.toString();\r\n                    }\r\n                },\r\n            },\r\n        }\r\n    }\r\n\r\n    @Watch('myWidth')\r\n    myWidthChanged(newValue: number)\r\n    {\r\n        if (newValue < 0 || newValue > 100) {\r\n            window.alert('Width must be between 0 and 100');\r\n            return;\r\n        }\r\n        this.charWidth = `${newValue}%`; // Update the width of the chart\r\n        this.drawOrUpdateChart(); // Redraw the chart with the new width\r\n    }\r\n\r\n\r\n    drawOrUpdateChart()\r\n    {\r\n        const chartContainer = this.el.shadowRoot?.querySelector(\"#chartBubble\")\r\n        if(!chartContainer)\r\n        {\r\n            window.alert(\"Chart container not found\");\r\n            return;\r\n        }\r\n\r\n        const newOptions = this.GetOption();\r\n\r\n        if(!this.apexChartInstance)// If the chart instance doesn't exist, create a new one\r\n        {\r\n            this.apexChartInstance = new ApexCharts(chartContainer, newOptions);\r\n            this.apexChartInstance.render();\r\n        }\r\n        else // If the chart instance already exists, update it with new options\r\n        {\r\n            this.apexChartInstance.updateOptions(newOptions,false, false);// Update the chart options without redrawing the chart\r\n        }\r\n\r\n    }\r\n\r\n    componentDidLoad()\r\n    {\r\n        this.drawOrUpdateChart();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        if (this.apexChartInstance) {\r\n          this.apexChartInstance.destroy(); // Clean up chart instance to prevent memory leaks\r\n        }\r\n    }\r\n    render()\r\n    {\r\n        return(<div id=\"chartBubble\"></div>)\r\n    }\r\n}"]}