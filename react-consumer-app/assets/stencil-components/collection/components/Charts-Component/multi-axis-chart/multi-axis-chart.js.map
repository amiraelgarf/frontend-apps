{"version":3,"file":"multi-axis-chart.js","sourceRoot":"","sources":["../../../../../src/components/Charts-Component/multi-axis-chart/multi-axis-chart.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, h, Element, Watch } from '@stencil/core';\r\nimport ApexCharts, { ApexOptions } from 'apexcharts';\r\n/*\r\n  * decided to break down the Apex option object as the user is not required to know apex charts options and how it works in order to use this library\r\n*/\r\n\r\ntype ApexYAxis = {\r\n  seriesName?: string;\r\n  axisTicks?: { show: boolean };\r\n  axisBorder?: { show: boolean };\r\n  title?: { text: string };\r\n  opposite?: boolean;\r\n  show?: boolean;\r\n};\r\n\r\n\r\nexport interface ChartSeries {\r\n  name: string;\r\n  type: 'line' | 'column' | 'area' | 'bar';\r\n  data: number[];\r\n}\r\n\r\nexport interface ChartYAxis {\r\n  seriesName: string;\r\n  title: string;\r\n  opposite?: boolean;\r\n}\r\n\r\n@Component({\r\n  tag: 'multi-axis-chart',\r\n  styleUrl: 'multi-axis-chart.css',\r\n  shadow: true,\r\n})\r\nexport class MultiAxisChart {\r\n\r\n  @Element() el!: HTMLElement;\r\n\r\n  private chartContainer!: HTMLDivElement;\r\n\r\n  private chart: ApexCharts | undefined = undefined;\r\n\r\n  @Prop() chartTitle?: string;\r\n\r\n  @Prop() chartHeight: number = 350;\r\n\r\n  @Prop() categories!: string[];\r\n\r\n  @Prop() series!: ChartSeries[];\r\n\r\n  @Prop() yAxes!: ChartYAxis[];\r\n\r\n  @Prop() colors?: string[];\r\n\r\n  componentDidLoad() {\r\n    this.initializeChart();\r\n  }\r\n\r\n  componentDidUpdate(newValue: any, oldValue: any, propName: string) {\r\n    const hasChanged = (prop: string) => {\r\n      if (Array.isArray(newValue[prop]) || typeof newValue[prop] === 'object') {\r\n        return JSON.stringify(newValue[prop]) !== JSON.stringify(oldValue[prop]);\r\n      }\r\n      return newValue[prop] !== oldValue[prop];\r\n    };\r\n\r\n    if (this.chart) {\r\n      if (\r\n        (propName === 'chartTitle' ||\r\n          propName === 'chartHeight' ||\r\n          propName === 'categories' ||\r\n          propName === 'series' ||\r\n          propName === 'yAxes' ||\r\n          propName === 'colors') &&\r\n          hasChanged(propName)\r\n      ) {\r\n        this.updateChart();\r\n      }\r\n    } else if (this.chartContainer && this.categories && this.series && this.yAxes) {\r\n      this.initializeChart();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  private initializeChart() {\r\n    if (this.chartContainer && this.categories && this.series && this.yAxes) {\r\n      if (!this.chart) {\r\n        this.chart = new ApexCharts(this.chartContainer, this.buildApexOptions());\r\n        this.chart.render();\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateChart() {\r\n    if (this.chart) {\r\n      this.chart.updateOptions(this.buildApexOptions());\r\n    } else {\r\n      this.initializeChart();\r\n    }\r\n  }\r\n\r\n\r\n  private buildApexOptions(): ApexOptions {\r\n    const yaxisConfig: ApexYAxis[] = this.yAxes.map(yAxis => ({\r\n      seriesName: yAxis.seriesName,\r\n      axisTicks: { show: true },\r\n      axisBorder: { show: true },\r\n      title: { text: yAxis.title },\r\n      opposite: yAxis.opposite || false,\r\n    }));\r\n\r\n    this.series.forEach(s => {\r\n      if ((s.type === 'column' || s.type === 'bar') && !yaxisConfig.some(ya => ya.seriesName === s.name)) {\r\n        yaxisConfig.push({\r\n          seriesName: s.name,\r\n          show: false\r\n        });\r\n      }\r\n    });\r\n\r\n    return {\r\n      chart: {\r\n        height: this.chartHeight,\r\n        type: 'line',\r\n        stacked: false,\r\n        toolbar: {\r\n          show: false\r\n        }\r\n      },\r\n      title: this.chartTitle ? {\r\n        text: this.chartTitle,\r\n        align: 'center',\r\n        style: {\r\n          fontSize: '20px',\r\n          fontFamily: 'Roboto, sans-serif',\r\n          color: '#333'\r\n        }\r\n      } : undefined,\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      colors: this.colors,\r\n      series: this.series,\r\n      stroke: {\r\n        width: this.series.map(s => (s.type === 'line' || s.type === 'area') ? 4 : 0),\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          columnWidth: \"20%\"\r\n        }\r\n      },\r\n      xaxis: {\r\n        categories: this.categories,\r\n      },\r\n      yaxis: yaxisConfig,\r\n      tooltip: {\r\n        shared: false,\r\n        intersect: true,\r\n        x: { show: false }\r\n      },\r\n      legend: {\r\n        horizontalAlign: \"left\",\r\n        offsetX: 40\r\n      }\r\n    };\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"chart-wrapper\">\r\n        <div ref={(el) => (this.chartContainer = el as HTMLDivElement)}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}