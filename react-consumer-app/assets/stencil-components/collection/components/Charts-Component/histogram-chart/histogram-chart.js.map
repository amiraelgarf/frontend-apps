{"version":3,"file":"histogram-chart.js","sourceRoot":"","sources":["../../../../../src/components/Charts-Component/histogram-chart/histogram-chart.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Element, Prop, Watch } from '@stencil/core';\r\nimport * as d3 from 'd3';\r\n\r\n\r\ninterface GradeType\r\n{\r\n    name: string,\r\n    semester1:number,\r\n    semester2:number\r\n}\r\n\r\ntype HistogramBin = d3.Bin<number, number>;//for the Bins\r\n\r\n\r\nconst studentGrades :GradeType[]= [\r\n  { name: \"Student 1\", semester1: 78, semester2: 82 },\r\n  { name: \"Student 2\", semester1: 85, semester2: 88 },\r\n  { name: \"Student 3\", semester1: 92, semester2: 95 },\r\n  { name: \"Student 4\", semester1: 64, semester2: 70 },\r\n  { name: \"Student 5\", semester1: 71, semester2: 75 },\r\n  { name: \"Student 6\", semester1: 88, semester2: 91 },\r\n  { name: \"Student 7\", semester1: 53, semester2: 62 },\r\n  { name: \"Student 8\", semester1: 79, semester2: 83 },\r\n  { name: \"Student 9\", semester1: 95, semester2: 97 },\r\n  { name: \"Student 10\", semester1: 68, semester2: 73 },\r\n  { name: \"Student 11\", semester1: 82, semester2: 85 },\r\n  { name: \"Student 12\", semester1: 76, semester2: 80 },\r\n  { name: \"Student 13\", semester1: 89, semester2: 92 },\r\n  { name: \"Student 14\", semester1: 61, semester2: 68 },\r\n  { name: \"Student 15\", semester1: 73, semester2: 77 },\r\n  { name: \"Student 16\", semester1: 84, semester2: 87 },\r\n  { name: \"Student 17\", semester1: 57, semester2: 65 },\r\n  { name: \"Student 18\", semester1: 91, semester2: 94 },\r\n  { name: \"Student 19\", semester1: 67, semester2: 72 },\r\n  { name: \"Student 20\", semester1: 80, semester2: 84 },\r\n  { name: \"Student 21\", semester1: 74, semester2: 79 },\r\n  { name: \"Student 22\", semester1: 83, semester2: 86 },\r\n  { name: \"Student 23\", semester1: 69, semester2: 74 },\r\n  { name: \"Student 24\", semester1: 90, semester2: 93 },\r\n  { name: \"Student 25\", semester1: 58, semester2: 66 },\r\n  { name: \"Student 26\", semester1: 77, semester2: 81 },\r\n  { name: \"Student 27\", semester1: 86, semester2: 89 },\r\n  { name: \"Student 28\", semester1: 63, semester2: 69 },\r\n  { name: \"Student 29\", semester1: 94, semester2: 96 },\r\n  { name: \"Student 30\", semester1: 72, semester2: 76 },\r\n];\r\n\r\n@Component({\r\n    tag:\"histogram-chart\",\r\n    styleUrl:\"histogram-chart.css\",\r\n    shadow:true\r\n})\r\nexport class HistogramChart\r\n{\r\n    @Element() el! : HTMLElement;\r\n    @Prop() myWidth:number =800\r\n    @Prop() myHight:number=500\r\n    @Prop() nameOfChart:string=\"Grade in 1st Semester vs 2nd Semester\"\r\n    @Prop() binCount:number=10\r\n\r\n    @Prop() data: GradeType[] = []\r\n\r\n    private activeSemester: 'semester1' | 'semester2' | null = null;\r\n    private infoTextSelection: d3.Selection<SVGTextElement, unknown, null, undefined> | null = null;\r\n\r\n    renderHistogram()\r\n    {\r\n        const margin = { top: 70, right: 40, bottom: 60, left: 175 };\r\n        const width = this.myWidth - margin.left - margin.right;\r\n        const height = this.myHight - margin.top - margin.bottom;\r\n\r\n        const container = this.el.shadowRoot?.querySelector('.histogramChart');\r\n        if (container) {\r\n            container.innerHTML = '';//remove the repreted SVG\r\n        }\r\n        const svg = d3.select(this.el.shadowRoot?.querySelector('.histogramChart')!)\r\n                    .append('svg')\r\n                    .attr(\"width\", width + margin.left + margin.right)\r\n                    .attr(\"height\", height + margin.top + margin.bottom)\r\n                    .append('g')\r\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        svg.append(\"text\")\r\n            .attr(\"class\",\"chart-title\")\r\n            .attr(\"x\", width/2)\r\n            .attr(\"y\", -20)\r\n            .style(\"text-anchor\", \"middle\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(this.nameOfChart);\r\n\r\n        // this.infoTextSelection = svg.append(\"text\")\r\n        //     .attr(\"class\", \"info-text\")\r\n        //     .attr(\"x\", width / 2)\r\n        //     .attr(\"y\", -40)\r\n        //     .style(\"text-anchor\", \"middle\")\r\n        //     .style(\"font-size\", \"14px\")\r\n        //     .text(\"\");\r\n\r\n        const allGrade :number[] = [...this.data.map(d=>d.semester1) , ...this.data.map(d=>d.semester2 )]\r\n                                                                                        .filter((grade): grade is number=> grade !== undefined && grade !== null);\r\n\r\n        const x= d3.scaleLinear<number,number>()\r\n                        .domain([0, d3.max(allGrade)||0])\r\n                        .range([0,width])\r\n                        .nice()\r\n\r\n        const bins = d3.histogram()\r\n            .value(d=>d)\r\n            .domain(x.domain() as [number,number])// Ensure domain is [min, max] (and the return from xScale is number[])\r\n            .thresholds(x.ticks(this.binCount)); // Divides the domain into `binCount` (e.g., 10) equal intervals\r\n        \r\n        const semester1Bins = bins(this.data.map(d => d.semester1));\r\n        const semester2Bins = bins(this.data.map(d => d.semester2));\r\n\r\n        // Y scale (frequency)\r\n        const y = d3.scaleLinear()\r\n            .domain([0, d3.max([...semester1Bins, ...semester2Bins], d => d.length)||0])\r\n            .range([height, 0])\r\n            .nice();\r\n\r\n        // Color scale\r\n         const color = d3.scaleOrdinal<string, string>()\r\n            .domain([\"semester1\", \"semester2\"])\r\n            .range([\"#1f77b4\", \"#ff7f0e\"])\r\n\r\n        // // Function to update bar opacities based on active semester\r\n        // const updateOpacities = () => {\r\n        //     svg.selectAll<SVGRectElement, HistogramBin>(\".bar-s1\")\r\n        //         .transition().duration(200)\r\n        //         .attr(\"opacity\", this.activeSemester === 'semester2' ? 0.2 : \r\n        //             this.activeSemester === 'semester1' ? 1.0 : 0.7);\r\n\r\n        //     svg.selectAll<SVGRectElement, HistogramBin>(\".bar-s2\")\r\n        //         .transition().duration(200)\r\n        //         .attr(\"opacity\", this.activeSemester === 'semester1' ? 0.2 : \r\n        //             this.activeSemester === 'semester2' ? 1.0 : 0.7);\r\n        // };\r\n\r\n        //  // Click handler for bars\r\n        // const handleBarClick = (event: Event, semester: 'semester1' | 'semester2') => {\r\n        // event.stopPropagation();\r\n        \r\n        // if (this.activeSemester === semester) {\r\n        //     this.activeSemester = null;\r\n        //     if (this.infoTextSelection) {\r\n        //         this.infoTextSelection.text(\"\");\r\n        //     }\r\n        // } else {\r\n        //     this.activeSemester = semester;\r\n        //     if (this.infoTextSelection) {\r\n        //         this.infoTextSelection.text(`Showing: ${semester === 'semester1' ? 'Semester 1' : 'Semester 2'}`);\r\n        //     }\r\n        //     }\r\n        //     updateOpacities(); // Apply opacity changes\r\n        // };\r\n        \r\n        // Draw semester 1 histogram\r\n        svg.selectAll<SVGRectElement, HistogramBin>(\".semester1\")\r\n            .data(semester1Bins)\r\n            .enter().append(\"rect\")\r\n            .attr(\"class\", \"bar-s1\") \r\n            .attr(\"x\", d => x(d.x0 ?? 0) + 1) // X position of the bar (start of the bin + small offset)\r\n            .attr(\"y\", d => y(d.length ?? 0)) // Y position of the bar (top of the bar based on frequency)\r\n            .attr(\"width\", d => {\r\n                const x0 = d.x0 ?? 0;\r\n                const x1 = d.x1 ?? x0 + 1;\r\n                return Math.max(0, x(x1) - x(x0) - 1);// Calculate bar width\r\n            })\r\n            .attr(\"height\", d => height - y(d.length ?? 0))// Height of the bar\r\n            .attr(\"fill\", () => color(\"semester1\") as string)\r\n            .attr(\"rx\", 5) // Rounded corners (horizontal)\r\n            .attr(\"ry\", 5) // Rounded corners (vertical)\r\n            .attr(\"opacity\", 0.7) // Make bars slightly transparent for overlay effect\r\n            // .on(\"click\", function(event) { \r\n            // handleBarClick(event, 'semester1');\r\n            // });\r\n\r\n\r\n            // Draw semester 2 histogram (overlaid)\r\n            svg.selectAll<SVGRectElement, HistogramBin>(\".semester2\")\r\n                .data(semester2Bins)\r\n                .enter().append(\"rect\")\r\n                .attr(\"class\", \"bar-s2\")\r\n                .attr(\"x\", d => x(d.x0 ?? 0) + 1)\r\n                .attr(\"y\", d => y(d.length ?? 0))\r\n                .attr(\"width\", d => {\r\n                    const x0 = d.x0 ?? 0;\r\n                    const x1 = d.x1 ?? x0 + 1;\r\n                    return Math.max(0, x(x1) - x(x0) - 1);\r\n                })\r\n                .attr(\"height\", d => height - y(d.length ?? 0))\r\n                .attr(\"fill\", () => color(\"semester2\") as string)\r\n                .attr(\"rx\", 5) // Rounded corners (horizontal)\r\n                .attr(\"ry\", 5) // Rounded corners (vertical)\r\n                .attr(\"opacity\", 0.7) // Make bars slightly transparent for overlay effect\r\n                // .on(\"click\", function(event) { \r\n                //  handleBarClick(event, 'semester2'); \r\n                // });\r\n\r\n            // svg.append(\"rect\")\r\n            // .attr(\"width\", width)\r\n            // .attr(\"height\", height)\r\n            // .attr(\"fill\", \"transparent\")\r\n            // .on(\"click\", () => {\r\n            //     this.activeSemester = null;\r\n            //     if (this.infoTextSelection) {\r\n            //         this.infoTextSelection.text(\"\");\r\n            //     }\r\n            //     updateOpacities();\r\n            // });\r\n\r\n\r\n            // Add X axis\r\n            svg.append(\"g\")\r\n            .attr(\"transform\", `translate(0,${height})`)\r\n            .call(d3.axisBottom(x))\r\n            .append(\"text\")\r\n            .attr(\"x\", width / 2)\r\n            .attr(\"y\", 35)\r\n            .attr(\"fill\", \"#000\")\r\n            .text(\"Grade Ranges\");\r\n\r\n            // Add Y axis\r\n            svg.append(\"g\")\r\n            .call(d3.axisLeft(y))\r\n            .append(\"text\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .attr(\"y\", -40)\r\n            .attr(\"x\", -height / 2)\r\n            .attr(\"fill\", \"#000\")\r\n            .text(\"Number of Students\");\r\n\r\n\r\n            // Add legend\r\n            const legend = svg.append(\"g\")\r\n            .attr(\"transform\", `translate(${width - 100}, 20)`);\r\n\r\n            legend.append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"width\", 18)\r\n            .attr(\"height\", 18)\r\n            .attr(\"fill\", color(\"semester1\"))\r\n            .attr(\"opacity\", 0.6);\r\n\r\n            legend.append(\"text\")\r\n            .attr(\"x\", 25)\r\n            .attr(\"y\", 9)\r\n            .attr(\"dy\", \"0.35em\")\r\n            .text(\"Semester 1\");\r\n\r\n            legend.append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 25)\r\n            .attr(\"width\", 18)\r\n            .attr(\"height\", 18)\r\n            .attr(\"fill\", color(\"semester2\"))\r\n            .attr(\"opacity\", 0.6);\r\n\r\n            legend.append(\"text\")\r\n            .attr(\"x\", 25)\r\n            .attr(\"y\", 34)\r\n            .attr(\"dy\", \"0.35em\")\r\n            .text(\"Semester 2\");\r\n\r\n    }\r\n\r\n    @Watch('myWidth')\r\n    @Watch('myHeight')\r\n    @Watch('nameOfChart')\r\n    @Watch('binCount')\r\n    @Watch(\"data\")\r\n    OnPropChange() {\r\n        this.renderHistogram();\r\n    }\r\n\r\n    componentDidLoad() {\r\n        this.renderHistogram();\r\n    }\r\n    componentDidUpdate() {\r\n        this.renderHistogram();\r\n    }\r\n    render()\r\n    {\r\n        return(<div class=\"histogramChart\"></div>)\r\n    }\r\n}"]}