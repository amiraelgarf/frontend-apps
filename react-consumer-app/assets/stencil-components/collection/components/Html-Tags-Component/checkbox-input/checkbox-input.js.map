{"version":3,"file":"checkbox-input.js","sourceRoot":"","sources":["../../../../../src/components/Html-Tags-Component/checkbox-input/checkbox-input.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAgB,CAAC,EAAE,MAAM,eAAe,CAAC;AAOxE,MAAM,OAAO,aAAa;IAIhB,IAAI,GAAW,EAAE,CAAC;IAKlB,KAAK,GAAW,EAAE,CAAC;IAKnB,KAAK,GAAU,EAAE,CAAC;IAKc,OAAO,GAAY,KAAK,CAAC;IAKzD,QAAQ,GAAY,KAAK,CAAC;IAKzB,QAAQ,CAAgE;IAEzE,YAAY,GAAG,CAAC,KAAY,EAAE,EAAE;QACtC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,OAAO;QACT,CAAC;QACD,MAAM,KAAK,GAAG,KAAK,CAAC,MAA0B,CAAC;QAC/C,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACpE,CAAC,CAAC;IAEF,MAAM;QACJ,OAAO,CACL,8DAAO,KAAK,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,4BAA4B,EAAE,IAAI,CAAC,QAAQ,EAAE;YACrF,8DACE,IAAI,EAAC,UAAU,EACf,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,KAAK,EAAC,gBAAgB,GACtB;YACF,6DAAM,KAAK,EAAC,iBAAiB;gBAC3B,4DAAK,KAAK,EAAC,oBAAoB,EAAC,OAAO,EAAC,WAAW;oBACjD,iEAAU,MAAM,EAAC,gBAAgB,GAAY,CACzC,CACD;YACP,6DAAM,KAAK,EAAC,gBAAgB,IAAE,IAAI,CAAC,KAAK,CAAQ,CAC1C,CACT,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, Event, EventEmitter, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'checkbox-input',\r\n  styleUrl: 'checkbox-input.css',\r\n  shadow: true,\r\n})\r\nexport class CheckboxInput {\r\n  /**\r\n   * The name of the checkbox input.\r\n   */\r\n  @Prop() name: string = '';\r\n\r\n  /**\r\n   * The value of the checkbox.\r\n   */\r\n  @Prop() value: string = '';\r\n\r\n  /**\r\n   * The label to display next to the checkbox.\r\n   */\r\n  @Prop() label: string= '';\r\n\r\n  /**\r\n   * Whether the checkbox is currently checked.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) checked: boolean = false;\r\n\r\n  /**\r\n   * Whether the checkbox is disabled.\r\n   */\r\n  @Prop() disabled: boolean = false;\r\n\r\n  /**\r\n   * Event emitted when the checkbox's checked state changes.\r\n   */\r\n  @Event() myChange: EventEmitter<{ value: string; checked: boolean }> | undefined;\r\n\r\n  private handleChange = (event: Event) => {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    const input = event.target as HTMLInputElement;\r\n    this.checked = input.checked;\r\n    this.myChange?.emit({ value: this.value, checked: this.checked });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <label class={{ 'checkbox-wrapper': true, 'checkbox-wrapper--disabled': this.disabled }}>\r\n        <input\r\n          type=\"checkbox\"\r\n          name={this.name}\r\n          value={this.value}\r\n          checked={this.checked}\r\n          disabled={this.disabled}\r\n          onChange={this.handleChange}\r\n          class=\"checkbox-input\"\r\n        />\r\n        <span class=\"checkbox-custom\">\r\n          <svg class=\"checkbox-checkmark\" viewBox=\"0 0 24 24\">\r\n            <polyline points=\"20 6 9 17 4 12\"></polyline>\r\n          </svg>\r\n        </span>\r\n        <span class=\"checkbox-label\">{this.label}</span>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n"]}