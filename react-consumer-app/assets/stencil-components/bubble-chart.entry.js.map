{"version":3,"file":"bubble-chart.entry.js","sources":["src/components/Charts-Component/bubble-chart/bubble-chart.css?tag=bubble-chart&encapsulation=shadow","src/components/Charts-Component/bubble-chart/bubble-chart.tsx"],"sourcesContent":["","import ApexCharts from 'apexcharts'\nimport { Component,Element,Prop,State,Watch,h } from '@stencil/core';\n\n\n\ninterface BubbleDataType {\n  country: string;\n  population: number;\n  world_land_area_percentage: number;\n}\n\nconst DEFAULT_BUBBLE_DATA: BubbleDataType[] = [\n  { \"country\": \"China\", \"population\": 1416000000, \"world_land_area_percentage\": 6.30 },\n  { \"country\": \"India\", \"population\": 1464000000, \"world_land_area_percentage\": 2.00 },\n  { \"country\": \"United States\", \"population\": 347300000, \"world_land_area_percentage\": 6.14 },\n  { \"country\": \"Indonesia\", \"population\": 285700000, \"world_land_area_percentage\": 1.22 },\n  { \"country\": \"Pakistan\", \"population\": 255200000, \"world_land_area_percentage\": 0.52 },\n  { \"country\": \"Nigeria\", \"population\": 237500000, \"world_land_area_percentage\": 0.61 },\n  { \"country\": \"Brazil\", \"population\": 212800000, \"world_land_area_percentage\": 5.61 },\n  { \"country\": \"Bangladesh\", \"population\": 175700000, \"world_land_area_percentage\": 0.10 },\n  { \"country\": \"Russia\", \"population\": 144000000, \"world_land_area_percentage\": 11.00 },\n  { \"country\": \"Mexico\", \"population\": 131900000, \"world_land_area_percentage\": 1.31 },\n  { \"country\": \"Japan\", \"population\": 123100000, \"world_land_area_percentage\": 0.24 },\n  { \"country\": \"Ethiopia\", \"population\": 135500000, \"world_land_area_percentage\": 0.67 },\n  { \"country\": \"Philippines\", \"population\": 116800000, \"world_land_area_percentage\": 0.20 },\n  { \"country\": \"Egypt\", \"population\": 118400000, \"world_land_area_percentage\": 0.67 },\n  { \"country\": \"DR Congo\", \"population\": 112800000, \"world_land_area_percentage\": 1.52 },\n  { \"country\": \"Germany\", \"population\": 84100000, \"world_land_area_percentage\": 0.23 },\n  { \"country\": \"United Kingdom\", \"population\": 69600000, \"world_land_area_percentage\": 0.16 },\n  { \"country\": \"France\", \"population\": 66700000, \"world_land_area_percentage\": 0.37 },\n  { \"country\": \"Canada\", \"population\": 40100000, \"world_land_area_percentage\": 6.11 },\n  { \"country\": \"Australia\", \"population\": 27000000, \"world_land_area_percentage\": 5.16 },\n  { \"country\": \"South Africa\", \"population\": 60400000, \"world_land_area_percentage\": 0.81 },\n  { \"country\": \"Italy\", \"population\": 58900000, \"world_land_area_percentage\": 0.20 },\n  { \"country\": \"Myanmar\", \"population\": 54200000, \"world_land_area_percentage\": 0.45 },\n  { \"country\": \"Kenya\", \"population\": 55100000, \"world_land_area_percentage\": 0.39 },\n  { \"country\": \"Colombia\", \"population\": 52300000, \"world_land_area_percentage\": 0.75 },\n  { \"country\": \"Spain\", \"population\": 47600000, \"world_land_area_percentage\": 0.34 },\n  { \"country\": \"Argentina\", \"population\": 46000000, \"world_land_area_percentage\": 1.86 },\n  { \"country\": \"Algeria\", \"population\": 44700000, \"world_land_area_percentage\": 1.56 },\n  { \"country\": \"Poland\", \"population\": 37600000, \"world_land_area_percentage\": 0.21 },\n  { \"country\": \"Uzbekistan\", \"population\": 35400000, \"world_land_area_percentage\": 0.29 },\n  { \"country\": \"Saudi Arabia\", \"population\": 36900000, \"world_land_area_percentage\": 1.44 },\n  { \"country\": \"Ukraine\", \"population\": 36700000, \"world_land_area_percentage\": 0.40 },\n  { \"country\": \"Morocco\", \"population\": 37900000, \"world_land_area_percentage\": 0.30 },\n  { \"country\": \"Peru\", \"population\": 34000000, \"world_land_area_percentage\": 0.85 },\n  { \"country\": \"Angola\", \"population\": 36100000, \"world_land_area_percentage\": 0.85 },\n  { \"country\": \"Malaysia\", \"population\": 33900000, \"world_land_area_percentage\": 0.22 },\n  { \"country\": \"Venezuela\", \"population\": 29300000, \"world_land_area_percentage\": 0.67 },\n  { \"country\": \"Ghana\", \"population\": 34000000, \"world_land_area_percentage\": 0.15 },\n  { \"country\": \"Afghanistan\", \"population\": 41100000, \"world_land_area_percentage\": 0.44 },\n  { \"country\": \"Nepal\", \"population\": 30600000, \"world_land_area_percentage\": 0.10 },\n  { \"country\": \"Yemen\", \"population\": 33700000, \"world_land_area_percentage\": 0.35 }\n];\n\n@Component(\n{\n    tag:\"bubble-chart\",\n    styleUrl:\"bubble-chart.css\",\n    shadow:true\n})\nexport class BubbleChart\n{\n    @Element() el!:HTMLElement\n\n    @Prop() myHeight:number = 350;\n    @Prop() myTitle:string = 'Country Population vs. Land Area Percentage';\n    @Prop() xTitle:string = 'Country (Hover for Name)';\n    @Prop() yTitle:string = 'Population';\n    @Prop() myWidth:number = 800;\n\n    @State() private charWidth!:string;\n\n    @Prop() bubbleData: BubbleDataType[] = DEFAULT_BUBBLE_DATA;\n\n    @State() private seriesData!: ApexAxisChartSeries;\n    @State() private countyName!: string[];\n\n    private apexChartInstance!:ApexCharts\n\n    //For the zoom effect\n    private originalXMin: number = 0;\n    private originalXMax: number = 0;\n    private originalYMin: number = 0;\n    private originalYMax: number = 0;\n\n    constructor()\n    {\n        this.ProcessBubbleData(this.bubbleData|| DEFAULT_BUBBLE_DATA);\n\n        this.charWidth= `${this.myWidth}px`;\n    }\n\n    private ProcessBubbleData(TheData: BubbleDataType[])\n    {\n        this.seriesData=[{\n            name: 'Population vs. Land Area Percentage',\n            data: TheData.map((items,index)=>[\n                index,\n                items.population,\n                items.world_land_area_percentage\n            ]),\n        }];\n\n        this.countyName = TheData.map(item => item.country);\n\n        // Calculate and store original axis ranges\n        this.originalXMin = -0.5; // Small padding\n        this.originalXMax = this.countyName.length - 0.5; // Small padding\n\n        const yValues = TheData.map(d => d.population);\n        this.originalYMin = Math.min(...yValues) * 0.9; // 90% of min value\n        this.originalYMax = Math.max(...yValues) * 1.1; // 110% of max value\n    }\n\n    @Watch('bubbleData')\n    bubbleDataChanged(newValue: BubbleDataType[]|undefined)\n    {\n        this.ProcessBubbleData(newValue|| DEFAULT_BUBBLE_DATA);\n        this.drawOrUpdateChart();\n    }\n\n    @Watch('myHeight')\n    @Watch('myTitle')\n    @Watch('xTitle')\n    @Watch('yTitle')\n    propertiesChanged()\n    {\n        this.drawOrUpdateChart();\n    }\n\n    private GetOption():ApexCharts.ApexOptions {\n\n        const formattedXLabel = this.countyName;// Store country names in a variable for use in the formatter\n\n        return {\n            series: this.seriesData,\n            chart: {\n                width: this.charWidth,\n                height: this.myHeight,\n                type: 'bubble',\n                events: {\n                    dataPointSelection: (event, chartContext, config) => {\n                        const seriesIndex = config.seriesIndex;\n                        const dataPointIndex = config.dataPointIndex;\n\n                        if (seriesIndex !== -1 && dataPointIndex !== -1) {\n                        const dataPoint = this.seriesData[seriesIndex].data[dataPointIndex] as [number, number, number];\n                        const x = dataPoint[0];\n                        const y = dataPoint[1];\n\n                        // Calculate new zoom ranges\n                        const zoomXPad = 0.5; // Fixed padding for X\n                        const zoomYPad = y * 0.2; // Relative padding for Y\n\n                        this.apexChartInstance.updateOptions({\n                            xaxis: { min: x - zoomXPad, max: x + zoomXPad, tickAmount: 1 },\n                            yaxis: { min: y - zoomYPad, max: y + zoomYPad, tickAmount: 2 },\n                        },true,true); // Update options without re-rendering or animation\n                        }\n                    },\n                    beforeResetZoom: () => {\n                        // Reset to original zoom levels\n                        this.apexChartInstance.updateOptions({\n                        xaxis: { min: this.originalXMin, max: this.originalXMax, tickAmount: null },\n                        yaxis: { min: this.originalYMin, max: this.originalYMax, tickAmount: null },\n                        },true,true )\n                    }\n            },\n            },\n            dataLabels: {\n                enabled: false // Usually disabled for bubble charts to avoid clutter\n            },\n            fill: {\n                opacity: 0.8\n            },\n            title: {\n                text: this.myTitle\n            },\n            xaxis:{\n                type: 'numeric',\n                title: {\n                    text: this.xTitle, // Informative title for the X-axis\n                    },\n                labels: {//btgilo 3la shkl \"0\",\"1\",\"2\",....\n                formatter: (value: string) => {\n                // Use countryNames array to display actual country names on the X-axis\n                const index = parseInt(value, 10); // Convert string to number\n                return formattedXLabel[index] || 'NoCountry'; // Return country name, or empty string if index is out of bounds\n                },\n                    rotate: -45, // Rotate labels to prevent overlap\n                    hideOverlappingLabels: true, // Hide labels if they overlap\n                    },\n            },\n            yaxis: {\n                title: {\n                    text: this.yTitle\n                },\n                labels: {\n                    formatter: function (value:number) {\n                        // Format population for readability (e.g., in millions/billions)\n                        if (value >= 1_000_000_000) return (value / 1_000_000_000).toFixed(1) + 'B';\n                        if (value >= 1_000_000) return (value / 1_000_000).toFixed(0) + 'M';\n                        return value.toString();\n                    }\n                },\n            },\n        }\n    }\n\n    @Watch('myWidth')\n    myWidthChanged(newValue: number)\n    {\n        if (newValue < 0 || newValue > 100) {\n            window.alert('Width must be between 0 and 100');\n            return;\n        }\n        this.charWidth = `${newValue}%`; // Update the width of the chart\n        this.drawOrUpdateChart(); // Redraw the chart with the new width\n    }\n\n\n    drawOrUpdateChart()\n    {\n        const chartContainer = this.el.shadowRoot?.querySelector(\"#chartBubble\")\n        if(!chartContainer)\n        {\n            window.alert(\"Chart container not found\");\n            return;\n        }\n\n        const newOptions = this.GetOption();\n\n        if(!this.apexChartInstance)// If the chart instance doesn't exist, create a new one\n        {\n            this.apexChartInstance = new ApexCharts(chartContainer, newOptions);\n            this.apexChartInstance.render();\n        }\n        else // If the chart instance already exists, update it with new options\n        {\n            this.apexChartInstance.updateOptions(newOptions,false, false);// Update the chart options without redrawing the chart\n        }\n\n    }\n\n    componentDidLoad()\n    {\n        this.drawOrUpdateChart();\n    }\n\n    disconnectedCallback() {\n        if (this.apexChartInstance) {\n          this.apexChartInstance.destroy(); // Clean up chart instance to prevent memory leaks\n        }\n    }\n    render()\n    {\n        return(<div id=\"chartBubble\"></div>)\n    }\n}"],"names":["ApexCharts"],"mappings":"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"}