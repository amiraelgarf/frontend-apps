{"file":"checkbox-input.js","mappings":";;AAAA,MAAM,gBAAgB,GAAG,0hDAA0hD;;MCOtiDA,eAAa,GAAAC,kBAAA,CAAA,MAAA,aAAA,SAAAC,CAAA,CAAA;;;;;;;IAIhB,IAAI,GAAW,EAAE;IAKjB,KAAK,GAAW,EAAE;IAKlB,KAAK,GAAU,EAAE;IAKe,OAAO,GAAY,KAAK;IAKxD,QAAQ,GAAY,KAAK;AAKxB,IAAA,QAAQ;AAET,IAAA,YAAY,GAAG,CAAC,KAAY,KAAI;AACtC,QAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB;;AAEF,QAAA,MAAM,KAAK,GAAG,KAAK,CAAC,MAA0B;AAC9C,QAAA,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO;AAC5B,QAAA,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;AACnE,KAAC;IAED,MAAM,GAAA;AACJ,QAAA,QACE,CAAA,CAAA,OAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAO,KAAK,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,4BAA4B,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAA,EACrF,CAAA,CAAA,OAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EACE,IAAI,EAAC,UAAU,EACf,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,KAAK,EAAC,gBAAgB,EACtB,CAAA,EACF,CAAM,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAC,iBAAiB,EAAA,EAC3B,CAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAK,KAAK,EAAC,oBAAoB,EAAC,OAAO,EAAC,WAAW,EAAA,EACjD,CAAA,CAAA,UAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAU,MAAM,EAAC,gBAAgB,EAAA,CAAY,CACzC,CACD,EACP,CAAM,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAC,gBAAgB,EAAE,EAAA,IAAI,CAAC,KAAK,CAAQ,CAC1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["CheckboxInput","__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/Html-Tags-Component/checkbox-input/checkbox-input.css?tag=checkbox-input&encapsulation=shadow","src/components/Html-Tags-Component/checkbox-input/checkbox-input.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n  font-family: 'Inter', sans-serif;\r\n}\r\n\r\n.checkbox-wrapper {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  padding: 8px 0;\r\n  position: relative;\r\n}\r\n\r\n.checkbox-input {\r\n  position: absolute;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n\r\n.checkbox-custom {\r\n  height: 20px;\r\n  width: 20px;\r\n  background-color: #e0e0e0;\r\n  border-radius: 4px;\r\n  display: inline-block;\r\n  position: relative;\r\n  transition: background-color 0.2s ease, border-color 0.2s ease;\r\n  border: 2px solid #ccc;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.checkbox-wrapper:hover .checkbox-input:not(:checked):not(:disabled) ~ .checkbox-custom {\r\n  background-color: #d0d0d0;\r\n  border-color: #a0a0a0;\r\n}\r\n\r\n.checkbox-input:checked ~ .checkbox-custom {\r\n  background-color: #005F87;\r\n  border-color: #005F87;\r\n}\r\n\r\n.checkbox-checkmark {\r\n  fill: none;\r\n  stroke: white;\r\n  stroke-width: 2;\r\n  stroke-linecap: round;\r\n  stroke-linejoin: round;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%) scale(0);\r\n  transition: transform 0.2s ease-in-out;\r\n}\r\n\r\n.checkbox-input:checked ~ .checkbox-custom .checkbox-checkmark {\r\n  transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n.checkbox-label {\r\n  margin-left: 10px;\r\n  color: #333;\r\n  font-size: 16px;\r\n  line-height: 1.2;\r\n}\r\n\r\n.checkbox-wrapper--disabled {\r\n  cursor: not-allowed;\r\n  opacity: 0.6;\r\n}\r\n\r\n.checkbox-wrapper--disabled .checkbox-custom {\r\n  background-color: #f0f0f0;\r\n  border-color: #e0e0e0;\r\n}\r\n\r\n.checkbox-wrapper--disabled .checkbox-input:checked ~ .checkbox-custom {\r\n  background-color: #a0c0e0;\r\n  border-color: #a0c0e0;\r\n}\r\n\r\n.checkbox-wrapper--disabled .checkbox-label {\r\n  color: #777;\r\n}\r\n\r\n.checkbox-input:focus-visible ~ .checkbox-custom {\r\n  outline: 2px solid #005F87;\r\n  outline-offset: 2px;\r\n}\r\n","import { Component, Prop, Event, EventEmitter, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'checkbox-input',\r\n  styleUrl: 'checkbox-input.css',\r\n  shadow: true,\r\n})\r\nexport class CheckboxInput {\r\n  /**\r\n   * The name of the checkbox input.\r\n   */\r\n  @Prop() name: string = '';\r\n\r\n  /**\r\n   * The value of the checkbox.\r\n   */\r\n  @Prop() value: string = '';\r\n\r\n  /**\r\n   * The label to display next to the checkbox.\r\n   */\r\n  @Prop() label: string= '';\r\n\r\n  /**\r\n   * Whether the checkbox is currently checked.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) checked: boolean = false;\r\n\r\n  /**\r\n   * Whether the checkbox is disabled.\r\n   */\r\n  @Prop() disabled: boolean = false;\r\n\r\n  /**\r\n   * Event emitted when the checkbox's checked state changes.\r\n   */\r\n  @Event() myChange: EventEmitter<{ value: string; checked: boolean }> | undefined;\r\n\r\n  private handleChange = (event: Event) => {\r\n    if (this.disabled) {\r\n      return;\r\n    }\r\n    const input = event.target as HTMLInputElement;\r\n    this.checked = input.checked;\r\n    this.myChange?.emit({ value: this.value, checked: this.checked });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <label class={{ 'checkbox-wrapper': true, 'checkbox-wrapper--disabled': this.disabled }}>\r\n        <input\r\n          type=\"checkbox\"\r\n          name={this.name}\r\n          value={this.value}\r\n          checked={this.checked}\r\n          disabled={this.disabled}\r\n          onChange={this.handleChange}\r\n          class=\"checkbox-input\"\r\n        />\r\n        <span class=\"checkbox-custom\">\r\n          <svg class=\"checkbox-checkmark\" viewBox=\"0 0 24 24\">\r\n            <polyline points=\"20 6 9 17 4 12\"></polyline>\r\n          </svg>\r\n        </span>\r\n        <span class=\"checkbox-label\">{this.label}</span>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n"],"version":3}