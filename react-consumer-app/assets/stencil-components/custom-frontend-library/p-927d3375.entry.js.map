{"version":3,"names":["count","values","valueof","value","extent","min","max","undefined","index","identity","x","array","Array","prototype","slice","constant","nice","start","stop","prestep","step","tickIncrement","isFinite","Math","floor","ceil","thresholdSturges","log","LN2","bin","domain","threshold","sturges","histogram","data","isArray","from","i","n","length","xz","x0","x1","tz","tn","ticks","pop","m","a","b","bins","push","j","bisect","_","arguments","thresholds","call","histogramChartCss","HistogramChart","myWidth","myHight","nameOfChart","binCount","activeSemester","infoTextSelection","renderHistogram","margin","top","right","bottom","left","width","this","height","container","el","shadowRoot","querySelector","innerHTML","svg","d3.select","append","attr","style","text","allGrade","map","d","semester1","semester2","filter","grade","d3.scaleLinear","d3.max","range","d3.histogram","semester1Bins","semester2Bins","y","color","d3.scaleOrdinal","selectAll","enter","d3.axisBottom","d3.axisLeft","legend","OnPropChange","componentDidLoad","componentDidUpdate","render","h","key","class"],"sources":["node_modules/d3-array/src/count.js","node_modules/d3-array/src/extent.js","node_modules/d3-array/src/identity.js","node_modules/d3-array/src/array.js","node_modules/d3-array/src/constant.js","node_modules/d3-array/src/nice.js","node_modules/d3-array/src/threshold/sturges.js","node_modules/d3-array/src/bin.js","src/components/Charts-Component/histogram-chart/histogram-chart.css?tag=histogram-chart&encapsulation=shadow","src/components/Charts-Component/histogram-chart/histogram-chart.tsx"],"sourcesContent":["export default function count(values, valueof) {\n  let count = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}\n","export default function extent(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n","export default function identity(x) {\n  return x;\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function constant(x) {\n  return () => x;\n}\n","import {tickIncrement} from \"./ticks.js\";\n\nexport default function nice(start, stop, count) {\n  let prestep;\n  while (true) {\n    const step = tickIncrement(start, stop, count);\n    if (step === prestep || step === 0 || !isFinite(step)) {\n      return [start, stop];\n    } else if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n    }\n    prestep = step;\n  }\n}\n","import count from \"../count.js\";\n\nexport default function thresholdSturges(values) {\n  return Math.max(1, Math.ceil(Math.log(count(values)) / Math.LN2) + 1);\n}\n","import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, {tickIncrement} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n    if (!Array.isArray(tz)) {\n      const max = x1, tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn);\n\n      // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn);\n\n      // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    }\n\n    // Remove any thresholds outside the domain.\n    // Be careful not to mutate an array owned by the user!\n    var m = tz.length, a = 0, b = m;\n    while (tz[a] <= x0) ++a;\n    while (tz[b - 1] > x1) --b;\n    if (a || b < m) tz = tz.slice(a, b), m = b - a;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            const j = Math.floor((x0 - x) * step);\n            bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : constant(Array.isArray(_) ? slice.call(_) : _), histogram) : threshold;\n  };\n\n  return histogram;\n}\n","/* :host targets the custom element itself (<histogram-chart>) */\r\n:host {\r\n    display: block; /* Ensures the component takes up its own block space */\r\n    width: 100%; /* Make it responsive to its parent container */\r\n    height: 100%;\r\n    font-family: 'Inter', sans-serif; /* Apply Inter font globally to the component */\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    color: #333; /* Default text color */\r\n}\r\n\r\n/* Styles for the main chart container div */\r\n.histogramChart {\r\n    display: flex; /* Use flexbox to center the SVG if needed */\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #f8f9fa; /* Light background for the chart area */\r\n    border-radius: 12px; /* Rounded corners for the container */\r\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */\r\n    overflow: hidden; /* Hide any overflowing content */\r\n}\r\n\r\n/* Styles for the SVG element */\r\n.histogramChart svg {\r\n    display: block; /* Remove extra space below SVG */\r\n    margin: auto; /* Center the SVG within its flex container */\r\n    background-color: #ffffff; /* White background for the drawing area */\r\n    border-radius: 10px; /* Slightly more rounded than the outer container */\r\n}\r\n\r\n/* Styles for the chart title */\r\n.chart-title {\r\n    font-size: 24px; /* Larger font for the title */\r\n    font-weight: 600; /* Semi-bold title */\r\n    fill: #202124; /* Darker color for the title */\r\n}\r\n\r\n/* Styles for the histogram bars */\r\n/* Note: Fill colors are set directly in JS for dynamic coloring based on semester */\r\nrect {\r\n    transition: all 0.3s ease-in-out; /* Smooth transition for hover effects */\r\n}\r\n\r\nrect:hover {\r\n    opacity: 0.9 !important; /* Slightly more opaque on hover */\r\n    transform: translateY(-2px); /* Lift bars slightly on hover */\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Add shadow on hover */\r\n}\r\n\r\n/* Styles for the axes */\r\n.domain {\r\n    stroke: #aaa; /* Color of the axis line */\r\n    stroke-width: 1px;\r\n}\r\n\r\n.tick line {\r\n    stroke: #ccc; /* Color of the tick marks */\r\n    stroke-width: 0.5px;\r\n}\r\n\r\n.tick text {\r\n    font-size: 11px; /* Font size for axis tick labels */\r\n    fill: #555; /* Color for axis tick labels */\r\n}\r\n\r\n/* Styles for axis labels */\r\n.axis-label {\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    fill: #333;\r\n}\r\n\r\n/* Styles for the legend */\r\n.legend {\r\n    font-size: 12px;\r\n    fill: #555;\r\n}\r\n\r\n.legend rect {\r\n    stroke: #ccc; /* Border for legend color swatches */\r\n    stroke-width: 0.5px;\r\n}\r\n\r\n.legend text {\r\n    fill: #333;\r\n}\r\n\r\n/* General SVG text styling */\r\ntext {\r\n    /* This ensures all text elements within the SVG inherit the Inter font */\r\n    font-family: 'Inter', sans-serif;\r\n}\r\n\r\nrect.bar-s1, rect.bar-s2 {\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n.info-text {\r\n    fill: #666;\r\n    font-style: italic;\r\n}\r\n\r\n.bar-s1, .bar-s2 {\r\n    cursor: pointer;\r\n    transition: opacity 0.2s ease;\r\n}","import { Component, h, Element, Prop, Watch } from '@stencil/core';\r\nimport * as d3 from 'd3';\r\n\r\n\r\ninterface GradeType\r\n{\r\n    name: string,\r\n    semester1:number,\r\n    semester2:number\r\n}\r\n\r\ntype HistogramBin = d3.Bin<number, number>;//for the Bins\r\n\r\n\r\nconst studentGrades :GradeType[]= [\r\n  { name: \"Student 1\", semester1: 78, semester2: 82 },\r\n  { name: \"Student 2\", semester1: 85, semester2: 88 },\r\n  { name: \"Student 3\", semester1: 92, semester2: 95 },\r\n  { name: \"Student 4\", semester1: 64, semester2: 70 },\r\n  { name: \"Student 5\", semester1: 71, semester2: 75 },\r\n  { name: \"Student 6\", semester1: 88, semester2: 91 },\r\n  { name: \"Student 7\", semester1: 53, semester2: 62 },\r\n  { name: \"Student 8\", semester1: 79, semester2: 83 },\r\n  { name: \"Student 9\", semester1: 95, semester2: 97 },\r\n  { name: \"Student 10\", semester1: 68, semester2: 73 },\r\n  { name: \"Student 11\", semester1: 82, semester2: 85 },\r\n  { name: \"Student 12\", semester1: 76, semester2: 80 },\r\n  { name: \"Student 13\", semester1: 89, semester2: 92 },\r\n  { name: \"Student 14\", semester1: 61, semester2: 68 },\r\n  { name: \"Student 15\", semester1: 73, semester2: 77 },\r\n  { name: \"Student 16\", semester1: 84, semester2: 87 },\r\n  { name: \"Student 17\", semester1: 57, semester2: 65 },\r\n  { name: \"Student 18\", semester1: 91, semester2: 94 },\r\n  { name: \"Student 19\", semester1: 67, semester2: 72 },\r\n  { name: \"Student 20\", semester1: 80, semester2: 84 },\r\n  { name: \"Student 21\", semester1: 74, semester2: 79 },\r\n  { name: \"Student 22\", semester1: 83, semester2: 86 },\r\n  { name: \"Student 23\", semester1: 69, semester2: 74 },\r\n  { name: \"Student 24\", semester1: 90, semester2: 93 },\r\n  { name: \"Student 25\", semester1: 58, semester2: 66 },\r\n  { name: \"Student 26\", semester1: 77, semester2: 81 },\r\n  { name: \"Student 27\", semester1: 86, semester2: 89 },\r\n  { name: \"Student 28\", semester1: 63, semester2: 69 },\r\n  { name: \"Student 29\", semester1: 94, semester2: 96 },\r\n  { name: \"Student 30\", semester1: 72, semester2: 76 },\r\n];\r\n\r\n@Component({\r\n    tag:\"histogram-chart\",\r\n    styleUrl:\"histogram-chart.css\",\r\n    shadow:true\r\n})\r\nexport class HistogramChart\r\n{\r\n    @Element() el! : HTMLElement;\r\n    @Prop() myWidth:number =800\r\n    @Prop() myHight:number=500\r\n    @Prop() nameOfChart:string=\"Grade in 1st Semester vs 2nd Semester\"\r\n    @Prop() binCount:number=10\r\n\r\n    @Prop() data: GradeType[] = []\r\n\r\n    private activeSemester: 'semester1' | 'semester2' | null = null;\r\n    private infoTextSelection: d3.Selection<SVGTextElement, unknown, null, undefined> | null = null;\r\n\r\n    renderHistogram()\r\n    {\r\n        const margin = { top: 70, right: 40, bottom: 60, left: 175 };\r\n        const width = this.myWidth - margin.left - margin.right;\r\n        const height = this.myHight - margin.top - margin.bottom;\r\n\r\n        const container = this.el.shadowRoot?.querySelector('.histogramChart');\r\n        if (container) {\r\n            container.innerHTML = '';//remove the repreted SVG\r\n        }\r\n        const svg = d3.select(this.el.shadowRoot?.querySelector('.histogramChart')!)\r\n                    .append('svg')\r\n                    .attr(\"width\", width + margin.left + margin.right)\r\n                    .attr(\"height\", height + margin.top + margin.bottom)\r\n                    .append('g')\r\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        svg.append(\"text\")\r\n            .attr(\"class\",\"chart-title\")\r\n            .attr(\"x\", width/2)\r\n            .attr(\"y\", -20)\r\n            .style(\"text-anchor\", \"middle\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(this.nameOfChart);\r\n\r\n        // this.infoTextSelection = svg.append(\"text\")\r\n        //     .attr(\"class\", \"info-text\")\r\n        //     .attr(\"x\", width / 2)\r\n        //     .attr(\"y\", -40)\r\n        //     .style(\"text-anchor\", \"middle\")\r\n        //     .style(\"font-size\", \"14px\")\r\n        //     .text(\"\");\r\n\r\n        const allGrade :number[] = [...this.data.map(d=>d.semester1) , ...this.data.map(d=>d.semester2 )]\r\n                                                                                        .filter((grade): grade is number=> grade !== undefined && grade !== null);\r\n\r\n        const x= d3.scaleLinear<number,number>()\r\n                        .domain([0, d3.max(allGrade)||0])\r\n                        .range([0,width])\r\n                        .nice()\r\n\r\n        const bins = d3.histogram()\r\n            .value(d=>d)\r\n            .domain(x.domain() as [number,number])// Ensure domain is [min, max] (and the return from xScale is number[])\r\n            .thresholds(x.ticks(this.binCount)); // Divides the domain into `binCount` (e.g., 10) equal intervals\r\n        \r\n        const semester1Bins = bins(this.data.map(d => d.semester1));\r\n        const semester2Bins = bins(this.data.map(d => d.semester2));\r\n\r\n        // Y scale (frequency)\r\n        const y = d3.scaleLinear()\r\n            .domain([0, d3.max([...semester1Bins, ...semester2Bins], d => d.length)||0])\r\n            .range([height, 0])\r\n            .nice();\r\n\r\n        // Color scale\r\n         const color = d3.scaleOrdinal<string, string>()\r\n            .domain([\"semester1\", \"semester2\"])\r\n            .range([\"#1f77b4\", \"#ff7f0e\"])\r\n\r\n        // // Function to update bar opacities based on active semester\r\n        // const updateOpacities = () => {\r\n        //     svg.selectAll<SVGRectElement, HistogramBin>(\".bar-s1\")\r\n        //         .transition().duration(200)\r\n        //         .attr(\"opacity\", this.activeSemester === 'semester2' ? 0.2 : \r\n        //             this.activeSemester === 'semester1' ? 1.0 : 0.7);\r\n\r\n        //     svg.selectAll<SVGRectElement, HistogramBin>(\".bar-s2\")\r\n        //         .transition().duration(200)\r\n        //         .attr(\"opacity\", this.activeSemester === 'semester1' ? 0.2 : \r\n        //             this.activeSemester === 'semester2' ? 1.0 : 0.7);\r\n        // };\r\n\r\n        //  // Click handler for bars\r\n        // const handleBarClick = (event: Event, semester: 'semester1' | 'semester2') => {\r\n        // event.stopPropagation();\r\n        \r\n        // if (this.activeSemester === semester) {\r\n        //     this.activeSemester = null;\r\n        //     if (this.infoTextSelection) {\r\n        //         this.infoTextSelection.text(\"\");\r\n        //     }\r\n        // } else {\r\n        //     this.activeSemester = semester;\r\n        //     if (this.infoTextSelection) {\r\n        //         this.infoTextSelection.text(`Showing: ${semester === 'semester1' ? 'Semester 1' : 'Semester 2'}`);\r\n        //     }\r\n        //     }\r\n        //     updateOpacities(); // Apply opacity changes\r\n        // };\r\n        \r\n        // Draw semester 1 histogram\r\n        svg.selectAll<SVGRectElement, HistogramBin>(\".semester1\")\r\n            .data(semester1Bins)\r\n            .enter().append(\"rect\")\r\n            .attr(\"class\", \"bar-s1\") \r\n            .attr(\"x\", d => x(d.x0 ?? 0) + 1) // X position of the bar (start of the bin + small offset)\r\n            .attr(\"y\", d => y(d.length ?? 0)) // Y position of the bar (top of the bar based on frequency)\r\n            .attr(\"width\", d => {\r\n                const x0 = d.x0 ?? 0;\r\n                const x1 = d.x1 ?? x0 + 1;\r\n                return Math.max(0, x(x1) - x(x0) - 1);// Calculate bar width\r\n            })\r\n            .attr(\"height\", d => height - y(d.length ?? 0))// Height of the bar\r\n            .attr(\"fill\", () => color(\"semester1\") as string)\r\n            .attr(\"rx\", 5) // Rounded corners (horizontal)\r\n            .attr(\"ry\", 5) // Rounded corners (vertical)\r\n            .attr(\"opacity\", 0.7) // Make bars slightly transparent for overlay effect\r\n            // .on(\"click\", function(event) { \r\n            // handleBarClick(event, 'semester1');\r\n            // });\r\n\r\n\r\n            // Draw semester 2 histogram (overlaid)\r\n            svg.selectAll<SVGRectElement, HistogramBin>(\".semester2\")\r\n                .data(semester2Bins)\r\n                .enter().append(\"rect\")\r\n                .attr(\"class\", \"bar-s2\")\r\n                .attr(\"x\", d => x(d.x0 ?? 0) + 1)\r\n                .attr(\"y\", d => y(d.length ?? 0))\r\n                .attr(\"width\", d => {\r\n                    const x0 = d.x0 ?? 0;\r\n                    const x1 = d.x1 ?? x0 + 1;\r\n                    return Math.max(0, x(x1) - x(x0) - 1);\r\n                })\r\n                .attr(\"height\", d => height - y(d.length ?? 0))\r\n                .attr(\"fill\", () => color(\"semester2\") as string)\r\n                .attr(\"rx\", 5) // Rounded corners (horizontal)\r\n                .attr(\"ry\", 5) // Rounded corners (vertical)\r\n                .attr(\"opacity\", 0.7) // Make bars slightly transparent for overlay effect\r\n                // .on(\"click\", function(event) { \r\n                //  handleBarClick(event, 'semester2'); \r\n                // });\r\n\r\n            // svg.append(\"rect\")\r\n            // .attr(\"width\", width)\r\n            // .attr(\"height\", height)\r\n            // .attr(\"fill\", \"transparent\")\r\n            // .on(\"click\", () => {\r\n            //     this.activeSemester = null;\r\n            //     if (this.infoTextSelection) {\r\n            //         this.infoTextSelection.text(\"\");\r\n            //     }\r\n            //     updateOpacities();\r\n            // });\r\n\r\n\r\n            // Add X axis\r\n            svg.append(\"g\")\r\n            .attr(\"transform\", `translate(0,${height})`)\r\n            .call(d3.axisBottom(x))\r\n            .append(\"text\")\r\n            .attr(\"x\", width / 2)\r\n            .attr(\"y\", 35)\r\n            .attr(\"fill\", \"#000\")\r\n            .text(\"Grade Ranges\");\r\n\r\n            // Add Y axis\r\n            svg.append(\"g\")\r\n            .call(d3.axisLeft(y))\r\n            .append(\"text\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .attr(\"y\", -40)\r\n            .attr(\"x\", -height / 2)\r\n            .attr(\"fill\", \"#000\")\r\n            .text(\"Number of Students\");\r\n\r\n\r\n            // Add legend\r\n            const legend = svg.append(\"g\")\r\n            .attr(\"transform\", `translate(${width - 100}, 20)`);\r\n\r\n            legend.append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"width\", 18)\r\n            .attr(\"height\", 18)\r\n            .attr(\"fill\", color(\"semester1\"))\r\n            .attr(\"opacity\", 0.6);\r\n\r\n            legend.append(\"text\")\r\n            .attr(\"x\", 25)\r\n            .attr(\"y\", 9)\r\n            .attr(\"dy\", \"0.35em\")\r\n            .text(\"Semester 1\");\r\n\r\n            legend.append(\"rect\")\r\n            .attr(\"x\", 0)\r\n            .attr(\"y\", 25)\r\n            .attr(\"width\", 18)\r\n            .attr(\"height\", 18)\r\n            .attr(\"fill\", color(\"semester2\"))\r\n            .attr(\"opacity\", 0.6);\r\n\r\n            legend.append(\"text\")\r\n            .attr(\"x\", 25)\r\n            .attr(\"y\", 34)\r\n            .attr(\"dy\", \"0.35em\")\r\n            .text(\"Semester 2\");\r\n\r\n    }\r\n\r\n    @Watch('myWidth')\r\n    @Watch('myHeight')\r\n    @Watch('nameOfChart')\r\n    @Watch('binCount')\r\n    @Watch(\"data\")\r\n    OnPropChange() {\r\n        this.renderHistogram();\r\n    }\r\n\r\n    componentDidLoad() {\r\n        this.renderHistogram();\r\n    }\r\n    componentDidUpdate() {\r\n        this.renderHistogram();\r\n    }\r\n    render()\r\n    {\r\n        return(<div class=\"histogramChart\"></div>)\r\n    }\r\n}"],"mappings":"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","ignoreList":[]}