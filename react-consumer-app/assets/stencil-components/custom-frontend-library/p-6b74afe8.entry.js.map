{"version":3,"names":["multiAxisChartCss","MultiAxisChart","chartContainer","chart","undefined","chartTitle","chartHeight","categories","series","yAxes","colors","componentDidLoad","this","initializeChart","componentDidUpdate","newValue","oldValue","propName","hasChanged","prop","Array","isArray","JSON","stringify","updateChart","ApexCharts","buildApexOptions","render","updateOptions","yaxisConfig","map","yAxis","seriesName","axisTicks","show","axisBorder","title","text","opposite","forEach","s","type","some","ya","name","push","height","stacked","toolbar","align","style","fontSize","fontFamily","color","dataLabels","enabled","stroke","width","plotOptions","bar","columnWidth","xaxis","yaxis","tooltip","shared","intersect","x","legend","horizontalAlign","offsetX","disconnectedCallback","destroy","h","key","class","ref","el"],"sources":["src/components/Charts-Component/multi-axis-chart/multi-axis-chart.css?tag=multi-axis-chart&encapsulation=shadow","src/components/Charts-Component/multi-axis-chart/multi-axis-chart.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n  font-family: 'Roboto', sans-serif;\r\n  @import url('https://fonts.googleapis.com/css?family=Roboto');\r\n}\r\n\r\n.chart-wrapper {\r\n  max-width: 100%;\r\n  margin: 20px auto;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  background-color: #fff;\r\n  padding: 10px;\r\n}\r\n\r\n.chart-wrapper > div {\r\n  width: 100%;\r\n  min-height: 300px; \r\n}\r\n","import { Component, Prop, h, Element, Watch } from '@stencil/core';\r\nimport ApexCharts, { ApexOptions } from 'apexcharts';\r\n/*\r\n  * decided to break down the Apex option object as the user is not required to know apex charts options and how it works in order to use this library\r\n*/\r\n\r\ntype ApexYAxis = {\r\n  seriesName?: string;\r\n  axisTicks?: { show: boolean };\r\n  axisBorder?: { show: boolean };\r\n  title?: { text: string };\r\n  opposite?: boolean;\r\n  show?: boolean;\r\n};\r\n\r\n\r\nexport interface ChartSeries {\r\n  name: string;\r\n  type: 'line' | 'column' | 'area' | 'bar';\r\n  data: number[];\r\n}\r\n\r\nexport interface ChartYAxis {\r\n  seriesName: string;\r\n  title: string;\r\n  opposite?: boolean;\r\n}\r\n\r\n@Component({\r\n  tag: 'multi-axis-chart',\r\n  styleUrl: 'multi-axis-chart.css',\r\n  shadow: true,\r\n})\r\nexport class MultiAxisChart {\r\n\r\n  @Element() el!: HTMLElement;\r\n\r\n  private chartContainer!: HTMLDivElement;\r\n\r\n  private chart: ApexCharts | undefined = undefined;\r\n\r\n  @Prop() chartTitle?: string;\r\n\r\n  @Prop() chartHeight: number = 350;\r\n\r\n  @Prop() categories!: string[];\r\n\r\n  @Prop() series!: ChartSeries[];\r\n\r\n  @Prop() yAxes!: ChartYAxis[];\r\n\r\n  @Prop() colors?: string[];\r\n\r\n  componentDidLoad() {\r\n    this.initializeChart();\r\n  }\r\n\r\n  componentDidUpdate(newValue: any, oldValue: any, propName: string) {\r\n    const hasChanged = (prop: string) => {\r\n      if (Array.isArray(newValue[prop]) || typeof newValue[prop] === 'object') {\r\n        return JSON.stringify(newValue[prop]) !== JSON.stringify(oldValue[prop]);\r\n      }\r\n      return newValue[prop] !== oldValue[prop];\r\n    };\r\n\r\n    if (this.chart) {\r\n      if (\r\n        (propName === 'chartTitle' ||\r\n          propName === 'chartHeight' ||\r\n          propName === 'categories' ||\r\n          propName === 'series' ||\r\n          propName === 'yAxes' ||\r\n          propName === 'colors') &&\r\n          hasChanged(propName)\r\n      ) {\r\n        this.updateChart();\r\n      }\r\n    } else if (this.chartContainer && this.categories && this.series && this.yAxes) {\r\n      this.initializeChart();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  private initializeChart() {\r\n    if (this.chartContainer && this.categories && this.series && this.yAxes) {\r\n      if (!this.chart) {\r\n        this.chart = new ApexCharts(this.chartContainer, this.buildApexOptions());\r\n        this.chart.render();\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateChart() {\r\n    if (this.chart) {\r\n      this.chart.updateOptions(this.buildApexOptions());\r\n    } else {\r\n      this.initializeChart();\r\n    }\r\n  }\r\n\r\n\r\n  private buildApexOptions(): ApexOptions {\r\n    const yaxisConfig: ApexYAxis[] = this.yAxes.map(yAxis => ({\r\n      seriesName: yAxis.seriesName,\r\n      axisTicks: { show: true },\r\n      axisBorder: { show: true },\r\n      title: { text: yAxis.title },\r\n      opposite: yAxis.opposite || false,\r\n    }));\r\n\r\n    this.series.forEach(s => {\r\n      if ((s.type === 'column' || s.type === 'bar') && !yaxisConfig.some(ya => ya.seriesName === s.name)) {\r\n        yaxisConfig.push({\r\n          seriesName: s.name,\r\n          show: false\r\n        });\r\n      }\r\n    });\r\n\r\n    return {\r\n      chart: {\r\n        height: this.chartHeight,\r\n        type: 'line',\r\n        stacked: false,\r\n        toolbar: {\r\n          show: false\r\n        }\r\n      },\r\n      title: this.chartTitle ? {\r\n        text: this.chartTitle,\r\n        align: 'center',\r\n        style: {\r\n          fontSize: '20px',\r\n          fontFamily: 'Roboto, sans-serif',\r\n          color: '#333'\r\n        }\r\n      } : undefined,\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      colors: this.colors,\r\n      series: this.series,\r\n      stroke: {\r\n        width: this.series.map(s => (s.type === 'line' || s.type === 'area') ? 4 : 0),\r\n      },\r\n      plotOptions: {\r\n        bar: {\r\n          columnWidth: \"20%\"\r\n        }\r\n      },\r\n      xaxis: {\r\n        categories: this.categories,\r\n      },\r\n      yaxis: yaxisConfig,\r\n      tooltip: {\r\n        shared: false,\r\n        intersect: true,\r\n        x: { show: false }\r\n      },\r\n      legend: {\r\n        horizontalAlign: \"left\",\r\n        offsetX: 40\r\n      }\r\n    };\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"chart-wrapper\">\r\n        <div ref={(el) => (this.chartContainer = el as HTMLDivElement)}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"sFAAA,MAAMA,EAAoB,6b,MCiCbC,EAAc,M,iDAIjBC,eAEAC,MAAgCC,UAEhCC,WAEAC,YAAsB,IAEtBC,WAEAC,OAEAC,MAEAC,OAER,gBAAAC,GACEC,KAAKC,iB,CAGP,kBAAAC,CAAmBC,EAAeC,EAAeC,GAC/C,MAAMC,EAAcC,IAClB,GAAIC,MAAMC,QAAQN,EAASI,YAAiBJ,EAASI,KAAU,SAAU,CACvE,OAAOG,KAAKC,UAAUR,EAASI,MAAWG,KAAKC,UAAUP,EAASG,G,CAEpE,OAAOJ,EAASI,KAAUH,EAASG,EAAK,EAG1C,GAAIP,KAAKT,MAAO,CACd,IACGc,IAAa,cACZA,IAAa,eACbA,IAAa,cACbA,IAAa,UACbA,IAAa,SACbA,IAAa,WACbC,EAAWD,GACb,CACAL,KAAKY,a,OAEF,GAAIZ,KAAKV,gBAAkBU,KAAKL,YAAcK,KAAKJ,QAAUI,KAAKH,MAAO,CAC9EG,KAAKC,iB,EAMD,eAAAA,GACN,GAAID,KAAKV,gBAAkBU,KAAKL,YAAcK,KAAKJ,QAAUI,KAAKH,MAAO,CACvE,IAAKG,KAAKT,MAAO,CACfS,KAAKT,MAAQ,IAAIsB,EAAWb,KAAKV,eAAgBU,KAAKc,oBACtDd,KAAKT,MAAMwB,Q,GAKT,WAAAH,GACN,GAAIZ,KAAKT,MAAO,CACdS,KAAKT,MAAMyB,cAAchB,KAAKc,mB,KACzB,CACLd,KAAKC,iB,EAKD,gBAAAa,GACN,MAAMG,EAA2BjB,KAAKH,MAAMqB,KAAIC,IAAK,CACnDC,WAAYD,EAAMC,WAClBC,UAAW,CAAEC,KAAM,MACnBC,WAAY,CAAED,KAAM,MACpBE,MAAO,CAAEC,KAAMN,EAAMK,OACrBE,SAAUP,EAAMO,UAAY,UAG9B1B,KAAKJ,OAAO+B,SAAQC,IAClB,IAAKA,EAAEC,OAAS,UAAYD,EAAEC,OAAS,SAAWZ,EAAYa,MAAKC,GAAMA,EAAGX,aAAeQ,EAAEI,OAAO,CAClGf,EAAYgB,KAAK,CACfb,WAAYQ,EAAEI,KACdV,KAAM,O,KAKZ,MAAO,CACL/B,MAAO,CACL2C,OAAQlC,KAAKN,YACbmC,KAAM,OACNM,QAAS,MACTC,QAAS,CACPd,KAAM,QAGVE,MAAOxB,KAAKP,WAAa,CACvBgC,KAAMzB,KAAKP,WACX4C,MAAO,SACPC,MAAO,CACLC,SAAU,OACVC,WAAY,qBACZC,MAAO,SAEPjD,UACJkD,WAAY,CACVC,QAAS,OAEX7C,OAAQE,KAAKF,OACbF,OAAQI,KAAKJ,OACbgD,OAAQ,CACNC,MAAO7C,KAAKJ,OAAOsB,KAAIU,GAAMA,EAAEC,OAAS,QAAUD,EAAEC,OAAS,OAAU,EAAI,KAE7EiB,YAAa,CACXC,IAAK,CACHC,YAAa,QAGjBC,MAAO,CACLtD,WAAYK,KAAKL,YAEnBuD,MAAOjC,EACPkC,QAAS,CACPC,OAAQ,MACRC,UAAW,KACXC,EAAG,CAAEhC,KAAM,QAEbiC,OAAQ,CACNC,gBAAiB,OACjBC,QAAS,I,CAKf,oBAAAC,GACE,GAAI1D,KAAKT,MAAO,CACdS,KAAKT,MAAMoE,S,EAKf,MAAA5C,GACE,OACE6C,EAAA,OAAAC,IAAA,2CAAKC,MAAM,iBACTF,EAAA,OAAAC,IAAA,2CAAKE,IAAMC,GAAQhE,KAAKV,eAAiB0E,I","ignoreList":[]}