{"file":"ix-field-label.ix-field-wrapper.entry.js","mappings":"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","names":[],"sources":["node_modules/@siemens/ix/dist/collection/components/utils/input/index.js","node_modules/@siemens/ix/dist/collection/components/field-label/field-label.css?tag=ix-field-label&encapsulation=shadow","node_modules/@siemens/ix/dist/collection/components/field-label/field-label.js","node_modules/@siemens/ix/dist/collection/components/field-wrapper/field-wrapper.css?tag=ix-field-wrapper&encapsulation=shadow","node_modules/@siemens/ix/dist/collection/components/field-wrapper/field-wrapper.js"],"sourcesContent":["export * from './validation';\nexport function isIxInputFieldComponent(obj) {\n    return (obj &&\n        'getAssociatedFormElement' in obj &&\n        typeof obj.getAssociatedFormElement === 'function' &&\n        'getNativeInputElement' in obj &&\n        typeof obj.getNativeInputElement === 'function');\n}\n//# sourceMappingURL=index.js.map\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n:host {\n  display: inline-block;\n  position: relative;\n  margin-top: 0.5rem;\n  margin-bottom: 0.25rem;\n}","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { h, Host } from \"@stencil/core\";\nimport { a11yHostAttributes } from \"../utils/a11y\";\nimport { createClassMutationObserver, isIxInputFieldComponent, } from \"../utils/input\";\nimport { makeRef } from \"../utils/make-ref\";\nexport class FormFieldLabel {\n    constructor() {\n        /** @internal */\n        this.isInvalid = false;\n        this.htmlForObserver = new MutationObserver(() => this.checkForInternalState());\n        this.a11yAttributes = {};\n        this.labelRef = makeRef();\n    }\n    connectedCallback() {\n        this.registerHtmlForObserver();\n        this.registerControlRefObserver();\n    }\n    disconnectedCallback() {\n        if (this.htmlForObserver) {\n            this.htmlForObserver.disconnect();\n        }\n        if (this.htmlForClassObserver) {\n            this.htmlForClassObserver.destroy();\n        }\n        if (this.controlRefClassObserver) {\n            this.controlRefClassObserver.destroy();\n        }\n    }\n    componentWillRender() {\n        this.checkForInternalState();\n    }\n    componentWillLoad() {\n        this.a11yAttributes = a11yHostAttributes(this.hostElement);\n    }\n    registerHtmlForObserver() {\n        if (typeof window === 'undefined') {\n            return;\n        }\n        if (this.htmlForObserver) {\n            this.htmlForObserver.disconnect();\n        }\n        if (this.htmlFor) {\n            this.htmlForObserver.observe(window.document, {\n                childList: true,\n                subtree: true,\n            });\n        }\n    }\n    async registerControlRefObserver() {\n        if (typeof window === 'undefined') {\n            return;\n        }\n        if (this.controlRefClassObserver) {\n            this.controlRefClassObserver.destroy();\n        }\n        if (this.controlRef) {\n            const input = await this.controlRef.waitForCurrent();\n            this.controlRefClassObserver = createClassMutationObserver(input, () => this.checkForInvalidState(input));\n        }\n    }\n    registerHtmlForClassObserver(forElement) {\n        if (this.htmlForClassObserver) {\n            this.htmlForClassObserver.destroy();\n        }\n        this.htmlForClassObserver = createClassMutationObserver(forElement, () => this.checkForInvalidState(forElement));\n    }\n    checkForInvalidState(elementToCheck) {\n        this.isInvalid =\n            elementToCheck.classList.contains('is-invalid') ||\n                elementToCheck.classList.contains('ix-invalid');\n    }\n    async checkForInternalState() {\n        if (this.htmlFor) {\n            const forElement = document.getElementById(this.htmlFor);\n            if (forElement) {\n                if (typeof forElement.required === 'boolean') {\n                    this.required = forElement.required;\n                }\n                this.registerHtmlForClassObserver(forElement);\n                this.checkForInvalidState(forElement);\n            }\n        }\n        if (this.controlRef) {\n            const input = await this.controlRef.waitForCurrent();\n            this.required = input.required;\n        }\n    }\n    async focusOnClick() {\n        if (this.htmlFor) {\n            const target = document.getElementById(this.htmlFor);\n            if (target) {\n                let input = null;\n                if (isIxInputFieldComponent(target)) {\n                    input = await target.getNativeInputElement();\n                }\n                else {\n                    input = target;\n                }\n                if (typeof input.focus === 'function') {\n                    input.focus();\n                }\n            }\n        }\n        if (this.controlRef) {\n            (await this.controlRef.waitForCurrent()).focus();\n        }\n    }\n    render() {\n        return (h(Host, { key: '4b00ea62a90eae362b7236d82a08f031c075c10d', onClick: () => this.focusOnClick() }, h(\"label\", Object.assign({ key: '1c3e406baa6b6414cacf17961279bcd7ad1545ca', htmlFor: this.htmlFor }, this.a11yAttributes, { ref: this.labelRef }), h(\"ix-typography\", { key: '54c5e7cbd6c505edbe2c37a20ecbecd91deb441b', textColor: this.isInvalid ? 'alarm' : 'soft', format: \"label\" }, h(\"slot\", { key: '9638a38954088cff1cd539f1b49ef70778b4ff21' }), this.required && h(\"span\", { key: 'b30063403d1e99121191ce945665781cba7ba34b' }, \"*\")))));\n    }\n    static get is() { return \"ix-field-label\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"field-label.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"field-label.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"required\": {\n                \"type\": \"boolean\",\n                \"attribute\": \"required\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A value is required or must be checked for the form to be submittable\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": true\n            },\n            \"htmlFor\": {\n                \"type\": \"string\",\n                \"attribute\": \"html-for\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The id of the form element that the label is associated with\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": true\n            },\n            \"controlRef\": {\n                \"type\": \"unknown\",\n                \"attribute\": \"control-ref\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"| MakeRef<HTMLElement>\\n    | MakeRef<HTMLInputElement>\\n    | MakeRef<HTMLTextAreaElement>\",\n                    \"resolved\": \"undefined | { (ref: HTMLElement | null | undefined): void; current: HTMLElement | null; waitForCurrent(): Promise<HTMLElement>; } | { (ref: HTMLInputElement | null | undefined): void; current: HTMLInputElement | null; waitForCurrent(): Promise<HTMLInputElement>; } | { (ref: HTMLTextAreaElement | null | undefined): void; current: HTMLTextAreaElement | null; waitForCurrent(): Promise<HTMLTextAreaElement>; }\",\n                    \"references\": {\n                        \"MakeRef\": {\n                            \"location\": \"import\",\n                            \"path\": \"../utils/make-ref\",\n                            \"id\": \"src/components/utils/make-ref.ts::MakeRef\"\n                        },\n                        \"HTMLElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLElement\"\n                        },\n                        \"HTMLInputElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLInputElement\"\n                        },\n                        \"HTMLTextAreaElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLTextAreaElement\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"\"\n                },\n                \"getter\": false,\n                \"setter\": false\n            },\n            \"isInvalid\": {\n                \"type\": \"boolean\",\n                \"attribute\": \"is-invalid\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n    static get elementRef() { return \"hostElement\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"htmlFor\",\n                \"methodName\": \"registerHtmlForObserver\"\n            }, {\n                \"propName\": \"controlRef\",\n                \"methodName\": \"registerControlRefObserver\"\n            }];\n    }\n}\n//# sourceMappingURL=field-label.js.map\n","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n:host {\n  display: flex;\n  position: relative;\n  flex-direction: column;\n}\n:host .slot-wrapper {\n  display: flex;\n  position: relative;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 0.25rem;\n}\n:host .field-bottom,\n:host .field-top {\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  justify-content: space-between;\n  gap: 1rem;\n  width: -moz-min-content;\n  width: min-content;\n  min-width: 100%;\n}\n:host .field-bottom .bottom-right {\n  margin-left: auto;\n  margin-right: 0px;\n}\n:host .bottom-text {\n  display: flex;\n  position: relative;\n  align-items: flex-start;\n  justify-content: flex-start;\n  gap: 0.25rem;\n  margin-right: 0.25rem;\n}\n:host .text-icon {\n  margin: 0.125rem;\n}\n:host .text-icon.invalid {\n  color: var(--theme-helper-icon--color--invalid);\n}\n:host .text-icon.info {\n  color: var(--theme-helper-icon--color--info);\n}\n:host .text-icon.warning {\n  color: var(--theme-helper-icon--color--warning);\n}\n:host .text-icon.valid {\n  color: var(--theme-helper-icon--color--valid);\n}\n:host .bottom-text {\n  margin-top: 0.25rem;\n  margin-bottom: 0.25rem;\n}","/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { Host, h } from \"@stencil/core\";\nimport { makeRef } from \"../utils/make-ref\";\nimport { hasAnyText, renderHelperText } from \"./helper-text-util\";\n/** @internal */\nexport class FieldWrapper {\n    constructor() {\n        /**\n         * Is the field component invalid\n         */\n        this.isInvalid = false;\n        /**\n         * Is the field component valid\n         */\n        this.isValid = false;\n        /**\n         * Is the field component info\n         */\n        this.isInfo = false;\n        /**\n         * Is the field component warning\n         */\n        this.isWarning = false;\n        /**\n         * Show helper, error, info, warning text as tooltip\n         */\n        this.showTextAsTooltip = false;\n        /**\n         * Show label as required\n         */\n        this.required = false;\n        this.slotRef = makeRef();\n    }\n    render() {\n        const textOptions = {\n            invalidText: this.invalidText,\n            isInvalid: this.isInvalid,\n            isValid: this.isValid,\n            validText: this.validText,\n            isWarning: this.isWarning,\n            warningText: this.warningText,\n            isInfo: this.isInfo,\n            infoText: this.infoText,\n            helperText: this.helperText,\n        };\n        return (h(Host, { key: '2dd925820a3b4fa7529956e90ad8df1268bd59d9' }, this.label && (h(\"div\", { key: 'f70725574cea826e7c541a95de2a0d373fcb67f7', class: \"field-top\" }, h(\"ix-field-label\", { key: 'b589dc77ba975991962c4e53e6344bc4bf5ececb', required: this.required, htmlFor: this.htmlForLabel, controlRef: this.controlRef, isInvalid: this.isInvalid }, this.label))), h(\"div\", { key: 'e79a3c3631908b280521dd9d86cf6e1a2b879b72', class: {\n                'slot-wrapper': true,\n            }, ref: this.slotRef }, h(\"slot\", { key: '6ee9b4b8656d366e1792b0eebbcb88968e39dfcf' })), h(\"div\", { key: '0cffa6f40dbcfed07670b2730aeab71d0b2a42fa', class: 'field-bottom' }, !this.showTextAsTooltip && renderHelperText(textOptions), h(\"div\", { key: '9ddbc2218a776d6b8a9b0a82ca1903ceca3253f8', class: \"bottom-right\" }, h(\"slot\", { key: 'e03a7d476ea203967beae72fe4f1296d0656da17', name: \"bottom-right\" }))), this.showTextAsTooltip === true && hasAnyText(textOptions) && (h(\"ix-tooltip\", { key: 'a735c861da75636163beb5484909b51271a46297', for: this.slotRef.waitForCurrent(), showDelay: 500, placement: \"bottom\" }, renderHelperText(textOptions)))));\n    }\n    static get is() { return \"ix-field-wrapper\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"field-wrapper.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"field-wrapper.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"helperText\": {\n                \"type\": \"string\",\n                \"attribute\": \"helper-text\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Show text below the field component\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false\n            },\n            \"label\": {\n                \"type\": \"string\",\n                \"attribute\": \"label\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Label for the field component\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false\n            },\n            \"invalidText\": {\n                \"type\": \"string\",\n                \"attribute\": \"invalid-text\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Error text for the field component\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false\n            },\n            \"validText\": {\n                \"type\": \"string\",\n                \"attribute\": \"valid-text\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Valid text for the field component\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false\n            },\n            \"infoText\": {\n                \"type\": \"string\",\n                \"attribute\": \"info-text\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Info text for the field component\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false\n            },\n            \"warningText\": {\n                \"type\": \"string\",\n                \"attribute\": \"warning-text\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Warning text for the field component\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false\n            },\n            \"isInvalid\": {\n                \"type\": \"boolean\",\n                \"attribute\": \"is-invalid\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Is the field component invalid\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"isValid\": {\n                \"type\": \"boolean\",\n                \"attribute\": \"is-valid\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Is the field component valid\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"isInfo\": {\n                \"type\": \"boolean\",\n                \"attribute\": \"is-info\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Is the field component info\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"isWarning\": {\n                \"type\": \"boolean\",\n                \"attribute\": \"is-warning\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Is the field component warning\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"showTextAsTooltip\": {\n                \"type\": \"boolean\",\n                \"attribute\": \"show-text-as-tooltip\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Show helper, error, info, warning text as tooltip\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"required\": {\n                \"type\": \"boolean\",\n                \"attribute\": \"required\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Show label as required\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"htmlForLabel\": {\n                \"type\": \"string\",\n                \"attribute\": \"html-for-label\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The id of the form element that the label is associated with\"\n                },\n                \"getter\": false,\n                \"setter\": false,\n                \"reflect\": false\n            },\n            \"controlRef\": {\n                \"type\": \"unknown\",\n                \"attribute\": \"control-ref\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"| MakeRef<HTMLElement>\\n    | MakeRef<HTMLInputElement>\\n    | MakeRef<HTMLTextAreaElement>\",\n                    \"resolved\": \"undefined | { (ref: HTMLElement | null | undefined): void; current: HTMLElement | null; waitForCurrent(): Promise<HTMLElement>; } | { (ref: HTMLInputElement | null | undefined): void; current: HTMLInputElement | null; waitForCurrent(): Promise<HTMLInputElement>; } | { (ref: HTMLTextAreaElement | null | undefined): void; current: HTMLTextAreaElement | null; waitForCurrent(): Promise<HTMLTextAreaElement>; }\",\n                    \"references\": {\n                        \"MakeRef\": {\n                            \"location\": \"import\",\n                            \"path\": \"../utils/make-ref\",\n                            \"id\": \"src/components/utils/make-ref.ts::MakeRef\"\n                        },\n                        \"HTMLElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLElement\"\n                        },\n                        \"HTMLInputElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLInputElement\"\n                        },\n                        \"HTMLTextAreaElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLTextAreaElement\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The control element that the label is associated with\"\n                },\n                \"getter\": false,\n                \"setter\": false\n            }\n        };\n    }\n    static get elementRef() { return \"hostElement\"; }\n}\n//# sourceMappingURL=field-wrapper.js.map\n"],"version":3}