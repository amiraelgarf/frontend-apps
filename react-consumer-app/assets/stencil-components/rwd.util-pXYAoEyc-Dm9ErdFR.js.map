{"version":3,"file":"rwd.util-pXYAoEyc-Dm9ErdFR.js","sources":["node_modules/@siemens/ix/dist/esm/rwd.util-pXYAoEyc.js"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst convertToRemString = (value) => {\n    const valueRem = value / 16;\n    return `${valueRem}rem`;\n};\nconst convertToAbbreviationString = (num) => {\n    if (isNaN(num) || num === null || num === undefined) {\n        return '';\n    }\n    let unit = '';\n    // Metric Units\n    const units = [\n        { unit: 'q', value: Math.pow(10, 15) },\n        { unit: 't', value: Math.pow(10, 12) },\n        { unit: 'B', value: Math.pow(10, 9) },\n        { unit: 'M', value: Math.pow(10, 6) },\n        { unit: 'K', value: Math.pow(10, 3) },\n    ];\n    units.some((pow) => {\n        let formattedNum = Math.abs(num);\n        if (formattedNum >= pow.value) {\n            formattedNum /= pow.value;\n            num = Math.round(formattedNum * 10) / 10;\n            unit = pow.unit;\n            return true;\n        }\n        return false;\n    });\n    return num + unit;\n};\n\nexport { convertToAbbreviationString as a, convertToRemString as c };\n//# sourceMappingURL=rwd.util-pXYAoEyc.js.map\n\n//# sourceMappingURL=rwd.util-pXYAoEyc.js.map"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACK,MAAC,kBAAkB,GAAG,CAAC,KAAK,KAAK;AACtC,IAAI,MAAM,QAAQ,GAAG,KAAK,GAAG,EAAE;AAC/B,IAAI,OAAO,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC;AAC3B;;;;","x_google_ignoreList":[0]}