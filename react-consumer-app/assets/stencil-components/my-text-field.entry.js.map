{"version":3,"file":"my-text-field.entry.js","sources":["src/components/Html-Tags-Component/my-text-field/my-text-field.css?tag=my-text-field&encapsulation=shadow","src/components/Html-Tags-Component/my-text-field/my-text-field.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\ninput {\n  border-radius: 5px;\n  border: 3px solid var(--theme-input--border-color);\n  background-color: var(--theme-input--background);\n  color: var(--theme-label--color);\n}\ninput[disabled= true ]\n{\n  background-color:var(--theme-label--color--disabled) ;\n}\ninput.small {\n  font-size: 12px;\n  min-height: 24px;\n}\n  input.medium {\n    font-size: 14px;\n    min-height: 36px;\n  }\ninput.large {\n  font-size: 16px;\n  min-height: 40px;\n}\n\n/* Responsive overrides on mobile */\n@media (max-width: 768px) {\n  input.small {\n    font-size: 0.9rem;\n    min-height: 30px;\n  }\n  input.medium {\n    font-size: 1rem;\n    min-height: 36px;\n  }\n  input.large {\n    font-size: 1.1rem;\n    min-height: 42px;\n  }\n}\n","import { Component, Prop, h, Event, EventEmitter } from '@stencil/core';\n@Component({\n  tag: 'my-text-field',\n  styleUrl: 'my-text-field.css',\n  shadow: true,\n})\n\n//add option for emiting the value from this Component to other Component\nexport class MyTextField\n{\n    @Prop() textInPlaceholder: string = \"Enter your text here\";\n    @Prop() lablelText: string = \"Text Field\";\n    @Prop() ColorOfLable: string = \"--theme-label--color\";\n\n    @Prop() variantSize: 'small' | 'medium' | 'large' = 'medium';\n\n    @Prop() IsRequeredToFill : boolean = false;\n\n    @Prop() size: number = 20;\n\n    @Prop() disable: boolean = false;\n\n    @Event() valueChanged!: EventEmitter<string>;\n\n    private onInputChange = (event: Event) => {\n        const target = event.target as HTMLInputElement;\n        this.valueChanged.emit(target.value);\n    }\n\n    render(){\n\n        const classesInput={\n            'small': this.variantSize === 'small',\n            'medium': this.variantSize === 'medium',\n            'large': this.variantSize === 'large',\n        };\n        return(<div>\n            <ix-style-loader></ix-style-loader>\n            <form>\n                <label htmlFor=\"TextField\" id=\"labelText\" style={{ color: this.ColorOfLable }}>{this.lablelText}</label>\n                <input type=\"text\"\n                placeholder={this.textInPlaceholder}\n                id=\"TextField\"\n                class={classesInput}\n                required={this.IsRequeredToFill}\n                size={this.size}\n                disabled={this.disable}\n                onInput={this.onInputChange}></input>\n            </form>\n        </div>)\n    }\n}\n"],"names":[],"mappings":";;AAAA,MAAM,cAAc,GAAG,+hBAA+hB;;MCQziB,WAAW,GAAA,MAAA;;;;;IAEZ,iBAAiB,GAAW,sBAAsB;IAClD,UAAU,GAAW,YAAY;IACjC,YAAY,GAAW,sBAAsB;IAE7C,WAAW,GAAiC,QAAQ;IAEpD,gBAAgB,GAAa,KAAK;IAElC,IAAI,GAAW,EAAE;IAEjB,OAAO,GAAY,KAAK;AAEvB,IAAA,YAAY;AAEb,IAAA,aAAa,GAAG,CAAC,KAAY,KAAI;AACrC,QAAA,MAAM,MAAM,GAAG,KAAK,CAAC,MAA0B;QAC/C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;AACxC,KAAC;IAED,MAAM,GAAA;AAEF,QAAA,MAAM,YAAY,GAAC;AACf,YAAA,OAAO,EAAE,IAAI,CAAC,WAAW,KAAK,OAAO;AACrC,YAAA,QAAQ,EAAE,IAAI,CAAC,WAAW,KAAK,QAAQ;AACvC,YAAA,OAAO,EAAE,IAAI,CAAC,WAAW,KAAK,OAAO;SACxC;QACD,QAAO,CAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EACH,CAAmC,CAAA,iBAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAA,EACnC,CAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EACI,CAAO,CAAA,OAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,OAAO,EAAC,WAAW,EAAC,EAAE,EAAC,WAAW,EAAC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,YAAY,EAAE,EAAG,EAAA,IAAI,CAAC,UAAU,CAAS,EACxG,CAAO,CAAA,OAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,IAAI,EAAC,MAAM,EAClB,WAAW,EAAE,IAAI,CAAC,iBAAiB,EACnC,EAAE,EAAC,WAAW,EACd,KAAK,EAAE,YAAY,EACnB,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAC/B,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,QAAQ,EAAE,IAAI,CAAC,OAAO,EACtB,OAAO,EAAE,IAAI,CAAC,aAAa,EAAU,CAAA,CAClC,CACL;;;;;;;"}