/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { GridColumn } from "./components/Html-Tags-Component/grid/custom-grid";
import { ColDef } from "@ag-grid-community/core";
import { ChartSeries, ChartYAxis } from "./components/Charts-Component/multi-axis-chart/multi-axis-chart";
import { ButtonSize, ButtonVariant } from "./components/Html-Tags-Component/my-button/my-button";
import { TextFieldTheme } from "./components/Html-Tags-Component/my-text-field/my-text-field";
export { GridColumn } from "./components/Html-Tags-Component/grid/custom-grid";
export { ColDef } from "@ag-grid-community/core";
export { ChartSeries, ChartYAxis } from "./components/Charts-Component/multi-axis-chart/multi-axis-chart";
export { ButtonSize, ButtonVariant } from "./components/Html-Tags-Component/my-button/my-button";
export { TextFieldTheme } from "./components/Html-Tags-Component/my-text-field/my-text-field";
export namespace Components {
    interface BubbleChart {
        /**
          * @default DEFAULT_BUBBLE_DATA
         */
        "bubbleData": BubbleDataType[];
        /**
          * @default 350
         */
        "myHeight": number;
        /**
          * @default 'Country Population vs. Land Area Percentage'
         */
        "myTitle": string;
        /**
          * @default 100
         */
        "myWidth": number;
        /**
          * @default 'Country (Hover for Name)'
         */
        "xTitle": string;
        /**
          * @default 'Population'
         */
        "yTitle": string;
    }
    interface CheckboxInput {
        /**
          * Whether the checkbox is currently checked.
          * @default false
         */
        "checked": boolean;
        /**
          * Whether the checkbox is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * The label to display next to the checkbox.
          * @default ''
         */
        "label": string;
        /**
          * The name of the checkbox input.
          * @default ''
         */
        "name": string;
        /**
          * The value of the checkbox.
          * @default ''
         */
        "value": string;
    }
    interface CustomGrid {
        /**
          * @default {     sortable: true,     filter: 'agTextColumnFilter',   }
         */
        "columnDefaults": Partial<ColDef>;
        /**
          * @default []
         */
        "columns": GridColumn[];
        /**
          * @default 1
         */
        "currentPage": number;
        /**
          * @default []
         */
        "data": any[];
        /**
          * @default 'No data available.'
         */
        "emptyMessage": string;
        /**
          * @default false
         */
        "filterable": boolean;
        /**
          * @default 40
         */
        "headerHeight": number;
        /**
          * @default true
         */
        "hoverEffect": boolean;
        /**
          * @default false
         */
        "loading": boolean;
        /**
          * @default 10
         */
        "pageSize": number;
        /**
          * @default false
         */
        "pagination": boolean;
        /**
          * @default false
         */
        "resizableColumns": boolean;
        /**
          * @default 40
         */
        "rowHeight": number;
        /**
          * @default false
         */
        "sortable": boolean;
        /**
          * @default false
         */
        "striped": boolean;
    }
    interface D3BarChart {
        /**
          * @default []
         */
        "chartData": ChartData[];
        /**
          * @default 0
         */
        "height": number;
        /**
          * @default 0
         */
        "width": number;
    }
    interface DateInput {
        /**
          * Whether the input is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * The label for the input field.
         */
        "label": string;
        /**
          * The maximum allowed date (YYYY-MM-DD).
         */
        "max"?: string;
        /**
          * The minimum allowed date (YYYY-MM-DD).
         */
        "min"?: string;
        /**
          * The name of the input field.
         */
        "name": string;
        /**
          * The current value of the date input.
          * @default ''
         */
        "value": string;
    }
    interface HeatMap {
        /**
          * @default 10
         */
        "cols": number;
        /**
          * @default 7
         */
        "rows": number;
    }
    interface HistogramChart {
        /**
          * @default 10
         */
        "binCount": number;
        /**
          * @default []
         */
        "data": GradeType[];
        /**
          * @default 500
         */
        "myHight": number;
        /**
          * @default 800
         */
        "myWidth": number;
        /**
          * @default "Grade in 1st Semester vs 2nd Semester"
         */
        "nameOfChart": string;
    }
    interface LineChart {
        /**
          * @default ['Jan', 'Feb', 'Mar', 'Apr', 'May']
         */
        "categories": string[];
        /**
          * @default [10, 20, 30, 40, 50]
         */
        "data": number[];
    }
    interface MultiAxisChart {
        "categories": string[];
        /**
          * @default 350
         */
        "chartHeight": number;
        "chartTitle"?: string;
        "colors"?: string[];
        "series": ChartSeries[];
        "yAxes": ChartYAxis[];
    }
    interface MyButton {
        /**
          * Whether the button is disabled
          * @default false
         */
        "disabled": boolean;
        /**
          * The text to display inside the button
         */
        "label": string;
        /**
          * The size of the button
          * @default 'medium'
         */
        "size": ButtonSize;
        /**
          * The visual variant of the button
          * @default 'primary'
         */
        "variant": ButtonVariant;
    }
    interface MyDropdownMenu {
        /**
          * @default []
         */
        "options": string[];
        /**
          * @default 'Siemens-LightTheme'
         */
        "theme": 'Siemens-LightTheme' | 'VIQ-DarkTheme';
        /**
          * @default []
         */
        "valeOfEachOption": string[];
        /**
          * @default 'medium'
         */
        "variantSize": 'small' | 'medium' | 'large';
    }
    interface MyList {
        /**
          * @default 'row'
         */
        "direction": 'column' | 'row';
        /**
          * @default ['Item 1', 'Item 2', 'Item 3']
         */
        "items": string[];
        /**
          * @default 10
         */
        "spaceBetweenItems": number;
        /**
          * @default 'Siemens-LightTheme'
         */
        "theme": 'Siemens-LightTheme' | 'VIQ-DarkTheme';
        /**
          * @default false
         */
        "wrap": boolean;
    }
    interface MyTextField {
        /**
          * @default "black"
         */
        "ColorOfLable": string;
        /**
          * @default false
         */
        "IsRequeredToFill": boolean;
        /**
          * @default "Siemens-LightTheme"
         */
        "Theme": TextFieldTheme;
        /**
          * @default false
         */
        "disable": boolean;
        /**
          * @default "Text Field"
         */
        "lablelText": string;
        /**
          * @default 20
         */
        "size": number;
        /**
          * @default "Enter your text here"
         */
        "textInPlaceholder": string;
        /**
          * @default 'medium'
         */
        "variantSize": 'small' | 'medium' | 'large';
    }
    interface NumberInput {
        /**
          * @default 100
         */
        "max": number;
        /**
          * @default 0
         */
        "min": number;
        /**
          * @default 0
         */
        "value": number;
    }
    interface PieChart {
        /**
          * @default []
         */
        "data": { label: string; value: number }[];
    }
    interface RadioButton {
        /**
          * Whether the radio button is currently checked.
          * @default false
         */
        "checked": boolean;
        /**
          * Whether the radio button is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * The label to display next to the radio button.
         */
        "label": string;
        /**
          * The name of the radio group.
         */
        "name": string;
        /**
          * The value of the radio button.
         */
        "value": string;
    }
    interface RangeInput {
        /**
          * Whether the input is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * The label for the input field.
         */
        "label": string;
        /**
          * The maximum allowed value.
          * @default 100
         */
        "max": number;
        /**
          * The minimum allowed value.
          * @default 0
         */
        "min": number;
        /**
          * The name of the input field.
         */
        "name": string;
        /**
          * The step interval for the range.
          * @default 1
         */
        "step": number;
        /**
          * The current value of the range input.
          * @default 0
         */
        "value": number;
    }
    interface RightClickMenu {
        /**
          * @default []
         */
        "theItems": DataItem[];
    }
    interface ScatterPlot {
        /**
          * @default "red"
         */
        "colorOfPoint": string;
        /**
          * @default [              // Type A: y = 2x + 5 + noise             {x: 0, y: 4.2, type: "A"}, {x: 3, y: 11.5, type: "A"}, {x: 6, y: 17.8, type: "A"},             {x: 9, y: 23.9, type: "A"}, {x: 12, y: 29.2, type: "A"}, {x: 15, y: 35.1, type: "A"},             {x: 18, y: 41.9, type: "A"}, {x: 21, y: 47.8, type: "A"}, {x: 24, y: 54.7, type: "A"},             {x: 27, y: 60.8, type: "A"}, {x: 30, y: 67.7, type: "A"}, {x: 33, y: 73.8, type: "A"},             {x: 36, y: 80.7, type: "A"}, {x: 39, y: 87.6, type: "A"}, {x: 42, y: 94.5, type: "A"},             {x: 45, y: 101.4, type: "A"}, {x: 48, y: 108.3, type: "A"}, {x: 51, y: 115.2, type: "A"},             {x: 54, y: 122.1, type: "A"}, {x: 57, y: 129.0, type: "A"}, {x: 60, y: 135.9, type: "A"},             {x: 63, y: 142.8, type: "A"}, {x: 66, y: 149.7, type: "A"}, {x: 69, y: 156.6, type: "A"},             {x: 72, y: 163.5, type: "A"}, {x: 75, y: 170.4, type: "A"}, {x: 78, y: 177.3, type: "A"},             {x: 81, y: 184.2, type: "A"}, {x: 84, y: 191.1, type: "A"}, {x: 87, y: 198.0, type: "A"},             {x: 90, y: 204.9, type: "A"}, {x: 93, y: 211.8, type: "A"}, {x: 96, y: 218.7, type: "A"},             // Type B: y = 1.5x + 10 + noise             {x: 1, y: 11.3, type: "B"}, {x: 4, y: 16.7, type: "B"}, {x: 7, y: 21.4, type: "B"},             {x: 10, y: 25.3, type: "B"}, {x: 13, y: 29.5, type: "B"}, {x: 16, y: 34.4, type: "B"},             {x: 19, y: 38.7, type: "B"}, {x: 22, y: 43.1, type: "B"}, {x: 25, y: 47.5, type: "B"},             {x: 28, y: 52.1, type: "B"}, {x: 31, y: 56.5, type: "B"}, {x: 34, y: 61.1, type: "B"},             {x: 37, y: 65.7, type: "B"}, {x: 40, y: 70.3, type: "B"}, {x: 43, y: 74.9, type: "B"},             {x: 46, y: 79.5, type: "B"}, {x: 49, y: 84.1, type: "B"}, {x: 52, y: 88.7, type: "B"},             {x: 55, y: 93.3, type: "B"}, {x: 58, y: 97.9, type: "B"}, {x: 61, y: 102.5, type: "B"},             {x: 64, y: 107.1, type: "B"}, {x: 67, y: 111.7, type: "B"}, {x: 70, y: 116.3, type: "B"},             {x: 73, y: 120.9, type: "B"}, {x: 76, y: 125.5, type: "B"}, {x: 79, y: 130.1, type: "B"},             {x: 82, y: 134.7, type: "B"}, {x: 85, y: 139.3, type: "B"}, {x: 88, y: 143.9, type: "B"},             {x: 91, y: 148.5, type: "B"}, {x: 94, y: 153.1, type: "B"}, {x: 97, y: 157.7, type: "B"},             // Type C: y = 3x + 0 + noise             {x: 2, y: 6.1, type: "C"}, {x: 5, y: 15.2, type: "C"}, {x: 8, y: 24.6, type: "C"},             {x: 11, y: 33.7, type: "C"}, {x: 14, y: 42.8, type: "C"}, {x: 17, y: 51.9, type: "C"},             {x: 20, y: 60.5, type: "C"}, {x: 23, y: 69.4, type: "C"}, {x: 26, y: 78.5, type: "C"},             {x: 29, y: 87.6, type: "C"}, {x: 32, y: 96.7, type: "C"}, {x: 35, y: 105.8, type: "C"},             {x: 38, y: 114.9, type: "C"}, {x: 41, y: 124.0, type: "C"}, {x: 44, y: 133.1, type: "C"},             {x: 47, y: 142.2, type: "C"}, {x: 50, y: 151.3, type: "C"}, {x: 53, y: 160.4, type: "C"},             {x: 56, y: 169.5, type: "C"}, {x: 59, y: 178.6, type: "C"}, {x: 62, y: 187.7, type: "C"},             {x: 65, y: 196.8, type: "C"}, {x: 68, y: 205.9, type: "C"}, {x: 71, y: 215.0, type: "C"},             {x: 74, y: 224.1, type: "C"}, {x: 77, y: 233.2, type: "C"}, {x: 80, y: 242.3, type: "C"},             {x: 83, y: 251.4, type: "C"}, {x: 86, y: 260.5, type: "C"}, {x: 89, y: 269.6, type: "C"},             {x: 92, y: 278.7, type: "C"}, {x: 95, y: 287.8, type: "C"}, {x: 98, y: 296.9, type: "C"},             {x: 100, y: 305.0, type: "C"}         ]
         */
        "data": Datum[];
        /**
          * @default 400
         */
        "myHight": number;
        /**
          * @default 660
         */
        "myWidth": number;
        /**
          * @default "Sample Scatter Plot"
         */
        "nameOfSactter": string;
        /**
          * @default 15
         */
        "xTicks": number;
        /**
          * @default "X Axis"
         */
        "xTitle": string;
        /**
          * @default 10
         */
        "yTicks": number;
        /**
          * @default "Y Axis"
         */
        "yTitle": string;
    }
    interface TextArea {
        /**
          * @default 'Enter text...'
         */
        "placeholder": string;
        /**
          * @default ''
         */
        "value": string;
    }
    interface TimeInput {
        /**
          * Whether the input is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * The label for the input field.
         */
        "label": string;
        /**
          * The maximum allowed time (HH:MM).
         */
        "max"?: string;
        /**
          * The minimum allowed time (HH:MM).
         */
        "min"?: string;
        /**
          * The name of the input field.
         */
        "name": string;
        /**
          * The step interval in seconds.
         */
        "step"?: number;
        /**
          * The current value of the time input.
          * @default ''
         */
        "value": string;
    }
    interface UiCards {
        /**
          * Optional title for the card
          * @default "Card"
         */
        "cardTitle": string;
    }
    interface UiNotification {
        /**
          * @default ''
         */
        "content": string;
        /**
          * @default ''
         */
        "header": string;
        /**
          * @default 'top-right'
         */
        "placement": 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
          * @default 'info'
         */
        "type": 'success' | 'error' | 'info' | 'warning';
    }
}
export interface CheckboxInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCheckboxInputElement;
}
export interface CustomGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCustomGridElement;
}
export interface DateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDateInputElement;
}
export interface MyButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyButtonElement;
}
export interface NumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNumberInputElement;
}
export interface RadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRadioButtonElement;
}
export interface RangeInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRangeInputElement;
}
export interface TextAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTextAreaElement;
}
export interface TimeInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTimeInputElement;
}
declare global {
    interface HTMLBubbleChartElement extends Components.BubbleChart, HTMLStencilElement {
    }
    var HTMLBubbleChartElement: {
        prototype: HTMLBubbleChartElement;
        new (): HTMLBubbleChartElement;
    };
    interface HTMLCheckboxInputElementEventMap {
        "myChange": any;
    }
    interface HTMLCheckboxInputElement extends Components.CheckboxInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCheckboxInputElementEventMap>(type: K, listener: (this: HTMLCheckboxInputElement, ev: CheckboxInputCustomEvent<HTMLCheckboxInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCheckboxInputElementEventMap>(type: K, listener: (this: HTMLCheckboxInputElement, ev: CheckboxInputCustomEvent<HTMLCheckboxInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCheckboxInputElement: {
        prototype: HTMLCheckboxInputElement;
        new (): HTMLCheckboxInputElement;
    };
    interface HTMLCustomGridElementEventMap {
        "gridSortChange": any;
        "gridFilterChange": any;
        "gridPageChange": number;
        "gridRowClick": any;
    }
    interface HTMLCustomGridElement extends Components.CustomGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCustomGridElementEventMap>(type: K, listener: (this: HTMLCustomGridElement, ev: CustomGridCustomEvent<HTMLCustomGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCustomGridElementEventMap>(type: K, listener: (this: HTMLCustomGridElement, ev: CustomGridCustomEvent<HTMLCustomGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCustomGridElement: {
        prototype: HTMLCustomGridElement;
        new (): HTMLCustomGridElement;
    };
    interface HTMLD3BarChartElement extends Components.D3BarChart, HTMLStencilElement {
    }
    var HTMLD3BarChartElement: {
        prototype: HTMLD3BarChartElement;
        new (): HTMLD3BarChartElement;
    };
    interface HTMLDateInputElementEventMap {
        "myChange": any;
    }
    interface HTMLDateInputElement extends Components.DateInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDateInputElementEventMap>(type: K, listener: (this: HTMLDateInputElement, ev: DateInputCustomEvent<HTMLDateInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDateInputElementEventMap>(type: K, listener: (this: HTMLDateInputElement, ev: DateInputCustomEvent<HTMLDateInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDateInputElement: {
        prototype: HTMLDateInputElement;
        new (): HTMLDateInputElement;
    };
    interface HTMLHeatMapElement extends Components.HeatMap, HTMLStencilElement {
    }
    var HTMLHeatMapElement: {
        prototype: HTMLHeatMapElement;
        new (): HTMLHeatMapElement;
    };
    interface HTMLHistogramChartElement extends Components.HistogramChart, HTMLStencilElement {
    }
    var HTMLHistogramChartElement: {
        prototype: HTMLHistogramChartElement;
        new (): HTMLHistogramChartElement;
    };
    interface HTMLLineChartElement extends Components.LineChart, HTMLStencilElement {
    }
    var HTMLLineChartElement: {
        prototype: HTMLLineChartElement;
        new (): HTMLLineChartElement;
    };
    interface HTMLMultiAxisChartElement extends Components.MultiAxisChart, HTMLStencilElement {
    }
    var HTMLMultiAxisChartElement: {
        prototype: HTMLMultiAxisChartElement;
        new (): HTMLMultiAxisChartElement;
    };
    interface HTMLMyButtonElementEventMap {
        "myClick": any;
    }
    interface HTMLMyButtonElement extends Components.MyButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyButtonElementEventMap>(type: K, listener: (this: HTMLMyButtonElement, ev: MyButtonCustomEvent<HTMLMyButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyButtonElementEventMap>(type: K, listener: (this: HTMLMyButtonElement, ev: MyButtonCustomEvent<HTMLMyButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyButtonElement: {
        prototype: HTMLMyButtonElement;
        new (): HTMLMyButtonElement;
    };
    interface HTMLMyDropdownMenuElement extends Components.MyDropdownMenu, HTMLStencilElement {
    }
    var HTMLMyDropdownMenuElement: {
        prototype: HTMLMyDropdownMenuElement;
        new (): HTMLMyDropdownMenuElement;
    };
    interface HTMLMyListElement extends Components.MyList, HTMLStencilElement {
    }
    var HTMLMyListElement: {
        prototype: HTMLMyListElement;
        new (): HTMLMyListElement;
    };
    interface HTMLMyTextFieldElement extends Components.MyTextField, HTMLStencilElement {
    }
    var HTMLMyTextFieldElement: {
        prototype: HTMLMyTextFieldElement;
        new (): HTMLMyTextFieldElement;
    };
    interface HTMLNumberInputElementEventMap {
        "valueChange": any;
    }
    interface HTMLNumberInputElement extends Components.NumberInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNumberInputElementEventMap>(type: K, listener: (this: HTMLNumberInputElement, ev: NumberInputCustomEvent<HTMLNumberInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNumberInputElementEventMap>(type: K, listener: (this: HTMLNumberInputElement, ev: NumberInputCustomEvent<HTMLNumberInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNumberInputElement: {
        prototype: HTMLNumberInputElement;
        new (): HTMLNumberInputElement;
    };
    interface HTMLPieChartElement extends Components.PieChart, HTMLStencilElement {
    }
    var HTMLPieChartElement: {
        prototype: HTMLPieChartElement;
        new (): HTMLPieChartElement;
    };
    interface HTMLRadioButtonElementEventMap {
        "myChange": any;
    }
    interface HTMLRadioButtonElement extends Components.RadioButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRadioButtonElementEventMap>(type: K, listener: (this: HTMLRadioButtonElement, ev: RadioButtonCustomEvent<HTMLRadioButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRadioButtonElementEventMap>(type: K, listener: (this: HTMLRadioButtonElement, ev: RadioButtonCustomEvent<HTMLRadioButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRadioButtonElement: {
        prototype: HTMLRadioButtonElement;
        new (): HTMLRadioButtonElement;
    };
    interface HTMLRangeInputElementEventMap {
        "myChange": any;
    }
    interface HTMLRangeInputElement extends Components.RangeInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRangeInputElementEventMap>(type: K, listener: (this: HTMLRangeInputElement, ev: RangeInputCustomEvent<HTMLRangeInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRangeInputElementEventMap>(type: K, listener: (this: HTMLRangeInputElement, ev: RangeInputCustomEvent<HTMLRangeInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRangeInputElement: {
        prototype: HTMLRangeInputElement;
        new (): HTMLRangeInputElement;
    };
    interface HTMLRightClickMenuElement extends Components.RightClickMenu, HTMLStencilElement {
    }
    var HTMLRightClickMenuElement: {
        prototype: HTMLRightClickMenuElement;
        new (): HTMLRightClickMenuElement;
    };
    interface HTMLScatterPlotElement extends Components.ScatterPlot, HTMLStencilElement {
    }
    var HTMLScatterPlotElement: {
        prototype: HTMLScatterPlotElement;
        new (): HTMLScatterPlotElement;
    };
    interface HTMLTextAreaElementEventMap {
        "valueChange": string;
    }
    interface HTMLTextAreaElement extends Components.TextArea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTextAreaElementEventMap>(type: K, listener: (this: HTMLTextAreaElement, ev: TextAreaCustomEvent<HTMLTextAreaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTextAreaElementEventMap>(type: K, listener: (this: HTMLTextAreaElement, ev: TextAreaCustomEvent<HTMLTextAreaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTextAreaElement: {
        prototype: HTMLTextAreaElement;
        new (): HTMLTextAreaElement;
    };
    interface HTMLTimeInputElementEventMap {
        "myChange": any;
    }
    interface HTMLTimeInputElement extends Components.TimeInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTimeInputElementEventMap>(type: K, listener: (this: HTMLTimeInputElement, ev: TimeInputCustomEvent<HTMLTimeInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTimeInputElementEventMap>(type: K, listener: (this: HTMLTimeInputElement, ev: TimeInputCustomEvent<HTMLTimeInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTimeInputElement: {
        prototype: HTMLTimeInputElement;
        new (): HTMLTimeInputElement;
    };
    interface HTMLUiCardsElement extends Components.UiCards, HTMLStencilElement {
    }
    var HTMLUiCardsElement: {
        prototype: HTMLUiCardsElement;
        new (): HTMLUiCardsElement;
    };
    interface HTMLUiNotificationElement extends Components.UiNotification, HTMLStencilElement {
    }
    var HTMLUiNotificationElement: {
        prototype: HTMLUiNotificationElement;
        new (): HTMLUiNotificationElement;
    };
    interface HTMLElementTagNameMap {
        "bubble-chart": HTMLBubbleChartElement;
        "checkbox-input": HTMLCheckboxInputElement;
        "custom-grid": HTMLCustomGridElement;
        "d3-bar-chart": HTMLD3BarChartElement;
        "date-input": HTMLDateInputElement;
        "heat-map": HTMLHeatMapElement;
        "histogram-chart": HTMLHistogramChartElement;
        "line-chart": HTMLLineChartElement;
        "multi-axis-chart": HTMLMultiAxisChartElement;
        "my-button": HTMLMyButtonElement;
        "my-dropdown-menu": HTMLMyDropdownMenuElement;
        "my-list": HTMLMyListElement;
        "my-text-field": HTMLMyTextFieldElement;
        "number-input": HTMLNumberInputElement;
        "pie-chart": HTMLPieChartElement;
        "radio-button": HTMLRadioButtonElement;
        "range-input": HTMLRangeInputElement;
        "right-click-menu": HTMLRightClickMenuElement;
        "scatter-plot": HTMLScatterPlotElement;
        "text-area": HTMLTextAreaElement;
        "time-input": HTMLTimeInputElement;
        "ui-cards": HTMLUiCardsElement;
        "ui-notification": HTMLUiNotificationElement;
    }
}
declare namespace LocalJSX {
    interface BubbleChart {
        /**
          * @default DEFAULT_BUBBLE_DATA
         */
        "bubbleData"?: BubbleDataType[];
        /**
          * @default 350
         */
        "myHeight"?: number;
        /**
          * @default 'Country Population vs. Land Area Percentage'
         */
        "myTitle"?: string;
        /**
          * @default 100
         */
        "myWidth"?: number;
        /**
          * @default 'Country (Hover for Name)'
         */
        "xTitle"?: string;
        /**
          * @default 'Population'
         */
        "yTitle"?: string;
    }
    interface CheckboxInput {
        /**
          * Whether the checkbox is currently checked.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Whether the checkbox is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The label to display next to the checkbox.
          * @default ''
         */
        "label"?: string;
        /**
          * The name of the checkbox input.
          * @default ''
         */
        "name"?: string;
        /**
          * Event emitted when the checkbox's checked state changes.
         */
        "onMyChange"?: (event: CheckboxInputCustomEvent<any>) => void;
        /**
          * The value of the checkbox.
          * @default ''
         */
        "value"?: string;
    }
    interface CustomGrid {
        /**
          * @default {     sortable: true,     filter: 'agTextColumnFilter',   }
         */
        "columnDefaults"?: Partial<ColDef>;
        /**
          * @default []
         */
        "columns"?: GridColumn[];
        /**
          * @default 1
         */
        "currentPage"?: number;
        /**
          * @default []
         */
        "data"?: any[];
        /**
          * @default 'No data available.'
         */
        "emptyMessage"?: string;
        /**
          * @default false
         */
        "filterable"?: boolean;
        /**
          * @default 40
         */
        "headerHeight"?: number;
        /**
          * @default true
         */
        "hoverEffect"?: boolean;
        /**
          * @default false
         */
        "loading"?: boolean;
        "onGridFilterChange"?: (event: CustomGridCustomEvent<any>) => void;
        "onGridPageChange"?: (event: CustomGridCustomEvent<number>) => void;
        "onGridRowClick"?: (event: CustomGridCustomEvent<any>) => void;
        "onGridSortChange"?: (event: CustomGridCustomEvent<any>) => void;
        /**
          * @default 10
         */
        "pageSize"?: number;
        /**
          * @default false
         */
        "pagination"?: boolean;
        /**
          * @default false
         */
        "resizableColumns"?: boolean;
        /**
          * @default 40
         */
        "rowHeight"?: number;
        /**
          * @default false
         */
        "sortable"?: boolean;
        /**
          * @default false
         */
        "striped"?: boolean;
    }
    interface D3BarChart {
        /**
          * @default []
         */
        "chartData"?: ChartData[];
        /**
          * @default 0
         */
        "height"?: number;
        /**
          * @default 0
         */
        "width"?: number;
    }
    interface DateInput {
        /**
          * Whether the input is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The label for the input field.
         */
        "label": string;
        /**
          * The maximum allowed date (YYYY-MM-DD).
         */
        "max"?: string;
        /**
          * The minimum allowed date (YYYY-MM-DD).
         */
        "min"?: string;
        /**
          * The name of the input field.
         */
        "name": string;
        /**
          * Event emitted when the input value changes.
         */
        "onMyChange"?: (event: DateInputCustomEvent<any>) => void;
        /**
          * The current value of the date input.
          * @default ''
         */
        "value"?: string;
    }
    interface HeatMap {
        /**
          * @default 10
         */
        "cols"?: number;
        /**
          * @default 7
         */
        "rows"?: number;
    }
    interface HistogramChart {
        /**
          * @default 10
         */
        "binCount"?: number;
        /**
          * @default []
         */
        "data"?: GradeType[];
        /**
          * @default 500
         */
        "myHight"?: number;
        /**
          * @default 800
         */
        "myWidth"?: number;
        /**
          * @default "Grade in 1st Semester vs 2nd Semester"
         */
        "nameOfChart"?: string;
    }
    interface LineChart {
        /**
          * @default ['Jan', 'Feb', 'Mar', 'Apr', 'May']
         */
        "categories"?: string[];
        /**
          * @default [10, 20, 30, 40, 50]
         */
        "data"?: number[];
    }
    interface MultiAxisChart {
        "categories": string[];
        /**
          * @default 350
         */
        "chartHeight"?: number;
        "chartTitle"?: string;
        "colors"?: string[];
        "series": ChartSeries[];
        "yAxes": ChartYAxis[];
    }
    interface MyButton {
        /**
          * Whether the button is disabled
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The text to display inside the button
         */
        "label": string;
        /**
          * Event emitted when the button is clicked
         */
        "onMyClick"?: (event: MyButtonCustomEvent<any>) => void;
        /**
          * The size of the button
          * @default 'medium'
         */
        "size"?: ButtonSize;
        /**
          * The visual variant of the button
          * @default 'primary'
         */
        "variant"?: ButtonVariant;
    }
    interface MyDropdownMenu {
        /**
          * @default []
         */
        "options"?: string[];
        /**
          * @default 'Siemens-LightTheme'
         */
        "theme"?: 'Siemens-LightTheme' | 'VIQ-DarkTheme';
        /**
          * @default []
         */
        "valeOfEachOption"?: string[];
        /**
          * @default 'medium'
         */
        "variantSize"?: 'small' | 'medium' | 'large';
    }
    interface MyList {
        /**
          * @default 'row'
         */
        "direction"?: 'column' | 'row';
        /**
          * @default ['Item 1', 'Item 2', 'Item 3']
         */
        "items"?: string[];
        /**
          * @default 10
         */
        "spaceBetweenItems"?: number;
        /**
          * @default 'Siemens-LightTheme'
         */
        "theme"?: 'Siemens-LightTheme' | 'VIQ-DarkTheme';
        /**
          * @default false
         */
        "wrap"?: boolean;
    }
    interface MyTextField {
        /**
          * @default "black"
         */
        "ColorOfLable"?: string;
        /**
          * @default false
         */
        "IsRequeredToFill"?: boolean;
        /**
          * @default "Siemens-LightTheme"
         */
        "Theme"?: TextFieldTheme;
        /**
          * @default false
         */
        "disable"?: boolean;
        /**
          * @default "Text Field"
         */
        "lablelText"?: string;
        /**
          * @default 20
         */
        "size"?: number;
        /**
          * @default "Enter your text here"
         */
        "textInPlaceholder"?: string;
        /**
          * @default 'medium'
         */
        "variantSize"?: 'small' | 'medium' | 'large';
    }
    interface NumberInput {
        /**
          * @default 100
         */
        "max"?: number;
        /**
          * @default 0
         */
        "min"?: number;
        "onValueChange"?: (event: NumberInputCustomEvent<any>) => void;
        /**
          * @default 0
         */
        "value"?: number;
    }
    interface PieChart {
        /**
          * @default []
         */
        "data"?: { label: string; value: number }[];
    }
    interface RadioButton {
        /**
          * Whether the radio button is currently checked.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Whether the radio button is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The label to display next to the radio button.
         */
        "label": string;
        /**
          * The name of the radio group.
         */
        "name": string;
        /**
          * Event emitted when the radio button's checked state changes.
         */
        "onMyChange"?: (event: RadioButtonCustomEvent<any>) => void;
        /**
          * The value of the radio button.
         */
        "value": string;
    }
    interface RangeInput {
        /**
          * Whether the input is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The label for the input field.
         */
        "label": string;
        /**
          * The maximum allowed value.
          * @default 100
         */
        "max"?: number;
        /**
          * The minimum allowed value.
          * @default 0
         */
        "min"?: number;
        /**
          * The name of the input field.
         */
        "name": string;
        /**
          * Event emitted when the input value changes.
         */
        "onMyChange"?: (event: RangeInputCustomEvent<any>) => void;
        /**
          * The step interval for the range.
          * @default 1
         */
        "step"?: number;
        /**
          * The current value of the range input.
          * @default 0
         */
        "value"?: number;
    }
    interface RightClickMenu {
        /**
          * @default []
         */
        "theItems"?: DataItem[];
    }
    interface ScatterPlot {
        /**
          * @default "red"
         */
        "colorOfPoint"?: string;
        /**
          * @default [              // Type A: y = 2x + 5 + noise             {x: 0, y: 4.2, type: "A"}, {x: 3, y: 11.5, type: "A"}, {x: 6, y: 17.8, type: "A"},             {x: 9, y: 23.9, type: "A"}, {x: 12, y: 29.2, type: "A"}, {x: 15, y: 35.1, type: "A"},             {x: 18, y: 41.9, type: "A"}, {x: 21, y: 47.8, type: "A"}, {x: 24, y: 54.7, type: "A"},             {x: 27, y: 60.8, type: "A"}, {x: 30, y: 67.7, type: "A"}, {x: 33, y: 73.8, type: "A"},             {x: 36, y: 80.7, type: "A"}, {x: 39, y: 87.6, type: "A"}, {x: 42, y: 94.5, type: "A"},             {x: 45, y: 101.4, type: "A"}, {x: 48, y: 108.3, type: "A"}, {x: 51, y: 115.2, type: "A"},             {x: 54, y: 122.1, type: "A"}, {x: 57, y: 129.0, type: "A"}, {x: 60, y: 135.9, type: "A"},             {x: 63, y: 142.8, type: "A"}, {x: 66, y: 149.7, type: "A"}, {x: 69, y: 156.6, type: "A"},             {x: 72, y: 163.5, type: "A"}, {x: 75, y: 170.4, type: "A"}, {x: 78, y: 177.3, type: "A"},             {x: 81, y: 184.2, type: "A"}, {x: 84, y: 191.1, type: "A"}, {x: 87, y: 198.0, type: "A"},             {x: 90, y: 204.9, type: "A"}, {x: 93, y: 211.8, type: "A"}, {x: 96, y: 218.7, type: "A"},             // Type B: y = 1.5x + 10 + noise             {x: 1, y: 11.3, type: "B"}, {x: 4, y: 16.7, type: "B"}, {x: 7, y: 21.4, type: "B"},             {x: 10, y: 25.3, type: "B"}, {x: 13, y: 29.5, type: "B"}, {x: 16, y: 34.4, type: "B"},             {x: 19, y: 38.7, type: "B"}, {x: 22, y: 43.1, type: "B"}, {x: 25, y: 47.5, type: "B"},             {x: 28, y: 52.1, type: "B"}, {x: 31, y: 56.5, type: "B"}, {x: 34, y: 61.1, type: "B"},             {x: 37, y: 65.7, type: "B"}, {x: 40, y: 70.3, type: "B"}, {x: 43, y: 74.9, type: "B"},             {x: 46, y: 79.5, type: "B"}, {x: 49, y: 84.1, type: "B"}, {x: 52, y: 88.7, type: "B"},             {x: 55, y: 93.3, type: "B"}, {x: 58, y: 97.9, type: "B"}, {x: 61, y: 102.5, type: "B"},             {x: 64, y: 107.1, type: "B"}, {x: 67, y: 111.7, type: "B"}, {x: 70, y: 116.3, type: "B"},             {x: 73, y: 120.9, type: "B"}, {x: 76, y: 125.5, type: "B"}, {x: 79, y: 130.1, type: "B"},             {x: 82, y: 134.7, type: "B"}, {x: 85, y: 139.3, type: "B"}, {x: 88, y: 143.9, type: "B"},             {x: 91, y: 148.5, type: "B"}, {x: 94, y: 153.1, type: "B"}, {x: 97, y: 157.7, type: "B"},             // Type C: y = 3x + 0 + noise             {x: 2, y: 6.1, type: "C"}, {x: 5, y: 15.2, type: "C"}, {x: 8, y: 24.6, type: "C"},             {x: 11, y: 33.7, type: "C"}, {x: 14, y: 42.8, type: "C"}, {x: 17, y: 51.9, type: "C"},             {x: 20, y: 60.5, type: "C"}, {x: 23, y: 69.4, type: "C"}, {x: 26, y: 78.5, type: "C"},             {x: 29, y: 87.6, type: "C"}, {x: 32, y: 96.7, type: "C"}, {x: 35, y: 105.8, type: "C"},             {x: 38, y: 114.9, type: "C"}, {x: 41, y: 124.0, type: "C"}, {x: 44, y: 133.1, type: "C"},             {x: 47, y: 142.2, type: "C"}, {x: 50, y: 151.3, type: "C"}, {x: 53, y: 160.4, type: "C"},             {x: 56, y: 169.5, type: "C"}, {x: 59, y: 178.6, type: "C"}, {x: 62, y: 187.7, type: "C"},             {x: 65, y: 196.8, type: "C"}, {x: 68, y: 205.9, type: "C"}, {x: 71, y: 215.0, type: "C"},             {x: 74, y: 224.1, type: "C"}, {x: 77, y: 233.2, type: "C"}, {x: 80, y: 242.3, type: "C"},             {x: 83, y: 251.4, type: "C"}, {x: 86, y: 260.5, type: "C"}, {x: 89, y: 269.6, type: "C"},             {x: 92, y: 278.7, type: "C"}, {x: 95, y: 287.8, type: "C"}, {x: 98, y: 296.9, type: "C"},             {x: 100, y: 305.0, type: "C"}         ]
         */
        "data"?: Datum[];
        /**
          * @default 400
         */
        "myHight"?: number;
        /**
          * @default 660
         */
        "myWidth"?: number;
        /**
          * @default "Sample Scatter Plot"
         */
        "nameOfSactter"?: string;
        /**
          * @default 15
         */
        "xTicks"?: number;
        /**
          * @default "X Axis"
         */
        "xTitle"?: string;
        /**
          * @default 10
         */
        "yTicks"?: number;
        /**
          * @default "Y Axis"
         */
        "yTitle"?: string;
    }
    interface TextArea {
        "onValueChange"?: (event: TextAreaCustomEvent<string>) => void;
        /**
          * @default 'Enter text...'
         */
        "placeholder"?: string;
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface TimeInput {
        /**
          * Whether the input is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The label for the input field.
         */
        "label": string;
        /**
          * The maximum allowed time (HH:MM).
         */
        "max"?: string;
        /**
          * The minimum allowed time (HH:MM).
         */
        "min"?: string;
        /**
          * The name of the input field.
         */
        "name": string;
        /**
          * Event emitted when the input value changes.
         */
        "onMyChange"?: (event: TimeInputCustomEvent<any>) => void;
        /**
          * The step interval in seconds.
         */
        "step"?: number;
        /**
          * The current value of the time input.
          * @default ''
         */
        "value"?: string;
    }
    interface UiCards {
        /**
          * Optional title for the card
          * @default "Card"
         */
        "cardTitle"?: string;
    }
    interface UiNotification {
        /**
          * @default ''
         */
        "content"?: string;
        /**
          * @default ''
         */
        "header"?: string;
        /**
          * @default 'top-right'
         */
        "placement"?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
          * @default 'info'
         */
        "type"?: 'success' | 'error' | 'info' | 'warning';
    }
    interface IntrinsicElements {
        "bubble-chart": BubbleChart;
        "checkbox-input": CheckboxInput;
        "custom-grid": CustomGrid;
        "d3-bar-chart": D3BarChart;
        "date-input": DateInput;
        "heat-map": HeatMap;
        "histogram-chart": HistogramChart;
        "line-chart": LineChart;
        "multi-axis-chart": MultiAxisChart;
        "my-button": MyButton;
        "my-dropdown-menu": MyDropdownMenu;
        "my-list": MyList;
        "my-text-field": MyTextField;
        "number-input": NumberInput;
        "pie-chart": PieChart;
        "radio-button": RadioButton;
        "range-input": RangeInput;
        "right-click-menu": RightClickMenu;
        "scatter-plot": ScatterPlot;
        "text-area": TextArea;
        "time-input": TimeInput;
        "ui-cards": UiCards;
        "ui-notification": UiNotification;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "bubble-chart": LocalJSX.BubbleChart & JSXBase.HTMLAttributes<HTMLBubbleChartElement>;
            "checkbox-input": LocalJSX.CheckboxInput & JSXBase.HTMLAttributes<HTMLCheckboxInputElement>;
            "custom-grid": LocalJSX.CustomGrid & JSXBase.HTMLAttributes<HTMLCustomGridElement>;
            "d3-bar-chart": LocalJSX.D3BarChart & JSXBase.HTMLAttributes<HTMLD3BarChartElement>;
            "date-input": LocalJSX.DateInput & JSXBase.HTMLAttributes<HTMLDateInputElement>;
            "heat-map": LocalJSX.HeatMap & JSXBase.HTMLAttributes<HTMLHeatMapElement>;
            "histogram-chart": LocalJSX.HistogramChart & JSXBase.HTMLAttributes<HTMLHistogramChartElement>;
            "line-chart": LocalJSX.LineChart & JSXBase.HTMLAttributes<HTMLLineChartElement>;
            "multi-axis-chart": LocalJSX.MultiAxisChart & JSXBase.HTMLAttributes<HTMLMultiAxisChartElement>;
            "my-button": LocalJSX.MyButton & JSXBase.HTMLAttributes<HTMLMyButtonElement>;
            "my-dropdown-menu": LocalJSX.MyDropdownMenu & JSXBase.HTMLAttributes<HTMLMyDropdownMenuElement>;
            "my-list": LocalJSX.MyList & JSXBase.HTMLAttributes<HTMLMyListElement>;
            "my-text-field": LocalJSX.MyTextField & JSXBase.HTMLAttributes<HTMLMyTextFieldElement>;
            "number-input": LocalJSX.NumberInput & JSXBase.HTMLAttributes<HTMLNumberInputElement>;
            "pie-chart": LocalJSX.PieChart & JSXBase.HTMLAttributes<HTMLPieChartElement>;
            "radio-button": LocalJSX.RadioButton & JSXBase.HTMLAttributes<HTMLRadioButtonElement>;
            "range-input": LocalJSX.RangeInput & JSXBase.HTMLAttributes<HTMLRangeInputElement>;
            "right-click-menu": LocalJSX.RightClickMenu & JSXBase.HTMLAttributes<HTMLRightClickMenuElement>;
            "scatter-plot": LocalJSX.ScatterPlot & JSXBase.HTMLAttributes<HTMLScatterPlotElement>;
            "text-area": LocalJSX.TextArea & JSXBase.HTMLAttributes<HTMLTextAreaElement>;
            "time-input": LocalJSX.TimeInput & JSXBase.HTMLAttributes<HTMLTimeInputElement>;
            "ui-cards": LocalJSX.UiCards & JSXBase.HTMLAttributes<HTMLUiCardsElement>;
            "ui-notification": LocalJSX.UiNotification & JSXBase.HTMLAttributes<HTMLUiNotificationElement>;
        }
    }
}
